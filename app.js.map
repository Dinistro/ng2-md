{"version":3,"sources":["webpack:///./demo/src/main.ts","webpack:///./demo/src/app/app.module.ts","webpack:///./demo/src/app/app.component.ts","webpack:///./demo/src/app/app.component.html","webpack:///./demo/src/app/app.component.css","webpack:///./src/index.ts","webpack:///./src/base-converter.class.ts","webpack:///./~/showdown/dist/showdown.js","webpack:///./src/utils.ts","webpack:///./src/base-converter-options.provider.ts","webpack:///./src/md-converter.provider.ts","webpack:///./src/md.directive.ts","webpack:///./src/src.directive.ts","webpack:///./src/md.pipe.ts","webpack:///./src/md.module.ts","webpack:///./demo/src/styles.css"],"names":[],"mappings":"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;KAED,mGAAmG;KAC3F,oCAAY,GAApB,UAAqB,IAAY;SACxB,iDAAY,CAA2C;SAC5D,IAAI,GAAG,eAAC,CAAC,YAAY,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;SAC1C,MAAM,CAAC,IAAI,CAAC;KAChB,CAAC;KACL,oBAAC;AAAD,EAAC,CA1BkC,oBAAS,GA0B3C;AA1BY,uCAAa;;;;;;;;ACxB1B,oCAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kBAAiB;AACjB,iBAAgB;AAChB,oBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,EAAE;AACb,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB,cAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAW,OAAO;AAClB,gBAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,SAAS;AACpB,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,iBAAiB;AAC5B,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAW,MAAM;AACjB,YAAW,OAAO;AAClB,eAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAW,OAAO;AAClB,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB,cAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,EAAE;AACb,YAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA,IAAG;AACH,oBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,EAAE;AACb,cAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,EAAE;AACb,cAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB,cAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,QAAQ;AACnB,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA,oBAAmB,qBAAqB;AACxC,qBAAoB,uBAAuB;AAC3C,qBAAoB,yBAAyB;AAC7C,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAW,OAAO;AAClB,YAAW,gBAAgB;AAC3B,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,YAAW,OAAO;AAClB,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW,OAAO;AAClB,cAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAkB;;AAElB;AACA;AACA;AACA,iBAAgB;AAChB;AACA;;AAEA;AACA;AACA;AACA,iBAAgB;AAChB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAoB;;AAEpB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa,EAAE;AACf,cAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAO;AACP;;AAEA,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,oBAAmB,gBAAgB;AACnC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAa,EAAE;AACf,cAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa,OAAO;AACpB,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAA+B,cAAc;AAC7C;AACA;;AAEA;AACA;AACA;AACA,cAAa,OAAO;AACpB,cAAa,OAAO;AACpB,iBAAgB;AAChB,iBAAgB;AAChB,gBAAe;AACf;AACA;AACA;AACA,uBAAsB,gCAAgC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa,OAAO;AACpB,cAAa,SAAS;AACtB,gBAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa,OAAO;AACpB,gBAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAAyB;AACzB,0BAAyB;AACzB,0BAAyB;AACzB;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6CAA4C;AAC5C;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,wCAAuC;AACvC,sCAAqC;;AAErC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAK;;AAEL;AACA;;AAEA;AACA;AACA,cAAa,OAAO;AACpB,cAAa,EAAE;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa,OAAO;AACpB,gBAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAgB;AAChB,cAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA,oBAAmB,sBAAsB;AACzC;AACA,sBAAqB,2BAA2B;AAChD;AACA;AACA;AACA;AACA,uBAAsB,6BAA6B;AACnD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,0CAAyC;AACzC;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,4DAA2D;AAC3D;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA,EAAC;;AAED;AACA;;AAEA;;AAEA;AACA;AACA;AACA,6DAA4D,EAAE;AAC9D;;AAEA;AACA;AACA,4EAA2E;AAC3E;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA0B,IAAI,MAAM,GAAG;AACvC,2BAA0B,IAAI,OAAO,GAAG;AACxC,2BAA0B,IAAI,MAAM,GAAG;;AAEvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,EAAC;;AAED;AACA;;AAEA;;AAEA,6BAA4B,IAAI;AAChC;;AAEA;AACA;AACA,+CAA8C;;AAE9C;AACA;;AAEA,uCAAsC;AACtC;AACA,iEAAgE;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA,IAAG;;AAEH;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,uCAAsC,EAAE,oBAAoB,IAAI;AAChE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gDAA+C;AAC/C,gDAA+C;;AAE/C;AACA;AACA;;AAEA;;AAEA;AACA,IAAG;;AAEH;AACA;;AAEA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,IAAI;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAsC;AACtC,qCAAoC;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA,4CAA2C;;AAE3C;AACA;;AAEA;AACA;AACA;AACA,gDAA+C;;AAE/C;AACA,oBAAmB,eAAe;AAClC;AACA;;AAEA;AACA,IAAG;;AAEH;AACA,sCAAqC;AACrC;;AAEA;;AAEA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAuD,WAAW;;AAElE;AACA,kDAAiD;;AAEjD;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,0CAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAgC;AAChC;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA2B;AAC3B;AACA,mCAAkC;;AAElC;AACA,kCAAiC;AACjC,kCAAiC;;AAEjC;AACA,sDAAqD;;AAErD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB,KAAK,MAAM,MAAM,MAAM,MAAM,OAAO,MAAM,MAAM,KAAK;AAC1E,iBAAgB,MAAM,MAAM,MAAM,MAAM,MAAM,KAAK,MAAM,MAAM,QAAQ,MAAM;AAC7E,eAAc,MAAM,OAAO,MAAM,MAAM,MAAM,MAAM,MAAM,KAAK,MAAM,MAAM;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0CAAyC;AACzC,MAAK;AACL;AACA,wDAAuD;AACvD,MAAK;AACL;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA,uCAAsC;;AAEtC;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB,EAAE;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gDAA+C;AAC/C,gDAA+C;;AAE/C;;AAEA;;AAEA;AACA;AACA;AACA,mDAAkD,uCAAuC;AACzF,IAAG;;AAEH;AACA;;AAEA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,EAAC;;AAED;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAiB,sBAAsB;AACvC,sEAAqE,IAAI;AACzE;;AAEA;AACA,6BAA4B,IAAI,kCAAkC,GAAG;AACrE;;AAEA;AACA;AACA;AACA,IAAG,MAAM,IAAI;;AAEb;AACA,mCAAkC,IAAI,iCAAiC,GAAG;AAC1E;;AAEA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;;AAEA,kBAAiB,oBAAoB;AACrC;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA,kBAAiB,+BAA+B;AAChD;AACA;;AAEA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mDAAkD,uCAAuC;AACzF;;AAEA,oEAAmE,IAAI,sCAAsC,IAAI;AACjH;AACA,EAAC;;AAED;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAoE,GAAG;AACvE,qEAAoE,GAAG;;AAEvE;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAgE,IAAI,kCAAkC,IAAI;;AAE1G;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAuB;AACvB;AACA;AACA;AACA;AACA,4BAA2B,OAAO;AAClC;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;;AAEA,gFAA+E,IAAI,mBAAmB,IAAI;AAC1G;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;;AAEA,4CAA2C;AAC3C;AACA;AACA;;AAEA;AACA,0CAAyC;AACzC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,EAAC;;AAED;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa,OAAO;AACpB,cAAa,QAAQ;AACrB,gBAAe;AACf;AACA;AACA;AACA,mDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAgC;AAChC;;AAEA;AACA,mCAAkC,GAAG;;AAErC;AACA;;AAEA,yBAAwB,IAAI,qDAAqD,IAAI,cAAc,IAAI;AACvG;;AAEA;AACA;AACA;AACA;AACA,uBAAsB,IAAI,qDAAqD,IAAI;AACnF;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,6EAA4E;AAC5E;AACA,8FAA6F,wBAAwB;AACrH;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;;AAEP;AACA;AACA;AACA,kCAAiC,GAAG;AACpC;AACA;AACA,QAAO;AACP;AACA;AACA,wCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,MAAK;;AAEL;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,cAAa,OAAO;AACpB,cAAa,OAAO;AACpB,cAAa,QAAQ;AACrB,gBAAe;AACf;AACA;AACA;AACA;AACA,0FAAyF,IAAI;AAC7F,0FAAyF,IAAI;AAC7F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA;AACA,QAAO;AACP,MAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,+BAA8B,IAAI,mCAAmC,GAAG;AACxE;AACA;AACA;AACA;AACA;AACA,IAAG;AACH,yCAAwC,IAAI,mCAAmC,GAAG;AAClF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAgC,IAAI,YAAY;;AAEhD;AACA;;AAEA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,8BAA6B,GAAG;AAChC;AACA,0BAAyB;;AAEzB,kBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,oDAAmD;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA,EAAC;;AAED;AACA;;AAEA;AACA;AACA,iCAAgC,EAAE,iBAAiB,EAAE;AACrD;AACA;;AAEA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAkB,IAAI,uDAAuD,IAAI,mBAAmB,IAAI;;AAExG;AACA;;AAEA;AACA;AACA,4EAA2E;;AAE3E;AACA;AACA;AACA;;AAEA,MAAK;AACL;AACA,gEAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;;AAEA;AACA,EAAC;;AAED;AACA;;AAEA;AACA;AACA;;AAEA,sBAAqB,IAAI,iBAAiB,IAAI,yBAAyB,GAAG,sCAAsC,GAAG;;AAEnH;AACA;AACA,uCAAsC;AACtC,MAAK;AACL,wCAAuC;AACvC,MAAK;AACL,yCAAwC;AACxC,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oBAAmB,YAAY;AAC/B;AACA;AACA;;AAEA,gBAAe,kBAAkB;AACjC;AACA,uBAAsB,aAAa;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,gBAAe,uBAAuB;AACtC,eAAc,IAAI;AAClB,mDAAkD,IAAI;AACtD;AACA;AACA;AACA;AACA;;AAEA,iEAAgE,kBAAkB;AAClF,gEAA+D,kBAAkB;AACjF;AACA;AACA;AACA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","file":"app.js","sourcesContent":["import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { enableProdMode } from '@angular/core';\r\nimport { AppModule } from './app/app.module';\r\nimport './styles.css';\r\nif (process.env.ENV === 'production') {\r\n    enableProdMode();\r\n}\r\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./demo/src/main.ts","import { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { BrowserModule }  from '@angular/platform-browser';\r\nimport { MaterialModule } from '@angular/material';\r\nimport { AppComponent } from './app.component';\r\nimport { MdModule } from '../../../src';\r\n\r\n@NgModule({\r\n    imports: [\r\n        BrowserModule,\r\n        FormsModule,\r\n        MaterialModule.forRoot(),\r\n        MdModule\r\n    ],\r\n    declarations: [\r\n        AppComponent\r\n    ],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./demo/src/app/app.module.ts","import { Component } from '@angular/core';\r\nimport { IConverterOptions } from '../../../src';\r\n\r\n@Component({\r\n    selector: 'my-app',\r\n    template: require('./app.component.html'),\r\n    styles: [require('./app.component.css')]\r\n})\r\nexport class AppComponent {\r\n\r\n    title = 'Angular 2 Markdown Demo!';\r\n    md: string = `## hello markdown!\r\n\\`\\`\\`js\r\nlet a = 1;\r\nlet b = 2;\r\nlet sum = a+b;\r\nconsole.log(\\`sum: \\${sum}\\`);\r\n\\`\\`\\``;\r\n\r\n    options: IConverterOptions = {\r\n        omitExtraWLInCodeBlocks: true,\r\n        noHeaderId: true,\r\n        prefixHeaderId: true,\r\n        parseImgDimensions: true,\r\n        headerLevelStart: 1,\r\n        literalMidWordUnderscores: true,\r\n        strikethrough: true,\r\n        tables: true,\r\n        tablesHeaderId: true,\r\n        ghCodeBlocks: true,\r\n        tasklists: true,\r\n        smoothLivePreview: true,\r\n        trimEachLine: 'space'\r\n    };\r\n\r\n    keys(obj: Object) {\r\n        return Object.keys(obj);\r\n    }\r\n\r\n    isType(value: any, type: string) {\r\n        return typeof value === type;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./demo/src/app/app.component.ts","module.exports = \"<md-sidenav-layout fullscreen>\\r\\n    <md-sidenav #start>\\r\\n        <md-nav-list>\\r\\n            <div *ngFor=\\\"let key of keys(options)\\\">\\r\\n                <md-slide-toggle *ngIf=\\\"isType(options[key],'boolean')\\\" class=\\\"nav-item-center\\\" md-list-item [(ngModel)]=\\\"options[key]\\\">{{key}}\\r\\n                </md-slide-toggle>\\r\\n                <md-input type=\\\"number\\\" *ngIf=\\\"isType(options[key],'number')\\\" class=\\\"nav-item-center\\\" md-list-item [(ngModel)]=\\\"options[key]\\\"\\r\\n                    placeholder=\\\"{{key}}\\\"></md-input>\\r\\n                <md-input type=\\\"text\\\" *ngIf=\\\"isType(options[key],'string')\\\" class=\\\"nav-item-center\\\" md-list-item [(ngModel)]=\\\"options[key]\\\"\\r\\n                    placeholder=\\\"{{key}}\\\"></md-input>\\r\\n            </div>\\r\\n            <hr/>\\r\\n        </md-nav-list>\\r\\n        <hr/>\\r\\n        <button md-button (click)=\\\"start.close()\\\">CLOSE</button>\\r\\n    </md-sidenav>\\r\\n    <div class=\\\"page\\\">\\r\\n        <md-toolbar color=\\\"primary\\\">\\r\\n            <button md-icon-button (click)=\\\"start.open()\\\">\\r\\n                <md-icon class=\\\"md-24\\\">menu</md-icon>\\r\\n            </button>\\r\\n            <h1 class=\\\"app-title\\\">{{title}}</h1>\\r\\n        </md-toolbar>\\r\\n        <div class=\\\"content\\\">\\r\\n            <div class=\\\"left\\\">\\r\\n                <textarea [(ngModel)]=\\\"md\\\"></textarea>\\r\\n            </div>\\r\\n            <div class=\\\"right\\\">\\r\\n                <md [value]=\\\"md\\\" [trimEachLine]=\\\"options.trimEachLine\\\" [omitExtraWLInCodeBlocks]=\\\"options.omitExtraWLInCodeBlocks\\\"\\r\\n                    [noHeaderId]=\\\"options.noHeaderId\\\" [prefixHeaderId]=\\\"options.prefixHeaderId\\\" [parseImgDimensions]=\\\"options.parseImgDimensions\\\"\\r\\n                    [headerLevelStart]=\\\"options.headerLevelStart\\\" [literalMidWordUnderscores]=\\\"options.literalMidWordUnderscores\\\"\\r\\n                    [strikethrough]=\\\"options.strikethrough\\\" [tables]=\\\"options.tables\\\" [tablesHeaderId]=\\\"options.tablesHeaderId\\\"\\r\\n                    [ghCodeBlocks]=\\\"options.ghCodeBlocks\\\" [tasklists]=\\\"options.tasklists\\\" [smoothLivePreview]=\\\"options.smoothLivePreview\\\"></md>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</md-sidenav-layout>\\r\\n<a href=\\\"https://github.com/yisraelx/ng2-md\\\"><img style=\\\"position: absolute; top: 0; right: 0; border: 0;\\\" src=\\\"https://camo.githubusercontent.com/38ef81f8aca64bb9a64448d0d70f1308ef5341ab/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f6461726b626c75655f3132313632312e706e67\\\"\\r\\nalt=\\\"Fork me on GitHub\\\" data-canonical-src=\\\"https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png\\\">\\r\\n</a>\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./demo/src/app/app.component.html\n// module id = 66\n// module chunks = 0","module.exports = \".app-title {\\r\\n    width: 100%;\\r\\n    text-align: center;\\r\\n}\\r\\n\\r\\nmd-sidenav {\\r\\n    width: 30%;\\r\\n    text-align: center;\\r\\n}\\r\\n\\r\\n.page {\\r\\n    height: calc(90%);\\r\\n}\\r\\n\\r\\n.content {\\r\\n    display: flex;\\r\\n    height: 100%;\\r\\n}\\r\\n\\r\\nmd, textarea {\\r\\n    height: 100%;\\r\\n    overflow-y: scroll;\\r\\n    border: none;\\r\\n    padding: 10px;\\r\\n}\\r\\n\\r\\n.left, .right {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    justify-content: center;\\r\\n    flex: 1;\\r\\n    padding: 1rem;\\r\\n}\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./demo/src/app/app.component.css\n// module id = 67\n// module chunks = 0","export { BaseConverter, IConverterConstructorOptions, IConverterOptions } from './base-converter.class';\r\nexport { ConverterOptions, BaseConverterOptions } from './base-converter-options.provider';\r\nexport { MdConverter } from './md-converter.provider';\r\nexport { MdDirective } from './md.directive';\r\nexport { SrcDirective } from './src.directive';\r\nexport { MdPipe } from './md.pipe';\r\n\r\nexport { MdModule } from './md.module';\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./src/index.ts","import { Converter } from 'showdown';\r\nimport $ from './utils';\r\nimport { ConverterOptions } from './base-converter-options.provider';\r\n\r\nexport interface IConverterOptions {\r\n    omitExtraWLInCodeBlocks?: boolean;\r\n    noHeaderId?: boolean;\r\n    prefixHeaderId?: string | boolean;\r\n    parseImgDimensions?: boolean;\r\n    headerLevelStart?: number;\r\n    literalMidWordUnderscores?: boolean;\r\n    strikethrough?: boolean;\r\n    tables?: boolean;\r\n    tablesHeaderId?: boolean;\r\n    ghCodeBlocks?: boolean;\r\n    tasklists?: boolean;\r\n    smoothLivePreview?: boolean;\r\n    trimEachLine?: boolean | 'tab' | 'space';\r\n}\r\n\r\nexport interface IConverterConstructorOptions extends IConverterOptions {\r\n    extensions?: string | string[];\r\n}\r\n\r\nexport class BaseConverter extends Converter {\r\n\r\n    constructor(options?: IConverterConstructorOptions | ConverterOptions) {\r\n        super(options);\r\n        // override makeHtml method (define in super constructor)\r\n        let {makeHtml} = this;\r\n        this.makeHtml = (text: string): string => {\r\n            text = this._preMakeHtml(text);\r\n            return makeHtml.call(this, text);\r\n        };\r\n    }\r\n\r\n    public setOptions(options: IConverterOptions): void {\r\n        if ($.isObject(options)) {\r\n            $.forIn(options, (value: any, optionKey: string) => {\r\n                this.setOption(optionKey, value);\r\n            });\r\n        }\r\n    }\r\n\r\n    /** pre super.makeHtml (situation that not possible to achieve it with subParsers or extensions) */\r\n    private _preMakeHtml(text: string): string {\r\n        let {trimEachLine} = this.getOptions() as IConverterOptions;\r\n        text = $.trimEachLine(text, trimEachLine);\r\n        return text;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./src/base-converter.class.ts",";/*! showdown 09-01-2017 */\r\n(function(){\r\n/**\n * Created by Tivie on 13-07-2015.\n */\n\nfunction getDefaultOpts(simple) {\n  'use strict';\n\n  var defaultOptions = {\n    omitExtraWLInCodeBlocks: {\n      defaultValue: false,\n      describe: 'Omit the default extra whiteline added to code blocks',\n      type: 'boolean'\n    },\n    noHeaderId: {\n      defaultValue: false,\n      describe: 'Turn on/off generated header id',\n      type: 'boolean'\n    },\n    prefixHeaderId: {\n      defaultValue: false,\n      describe: 'Specify a prefix to generated header ids',\n      type: 'string'\n    },\n    ghCompatibleHeaderId: {\n      defaultValue: false,\n      describe: 'Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)',\n      type: 'boolean'\n    },\n    headerLevelStart: {\n      defaultValue: false,\n      describe: 'The header blocks level start',\n      type: 'integer'\n    },\n    parseImgDimensions: {\n      defaultValue: false,\n      describe: 'Turn on/off image dimension parsing',\n      type: 'boolean'\n    },\n    simplifiedAutoLink: {\n      defaultValue: false,\n      describe: 'Turn on/off GFM autolink style',\n      type: 'boolean'\n    },\n    excludeTrailingPunctuationFromURLs: {\n      defaultValue: false,\n      describe: 'Excludes trailing punctuation from links generated with autoLinking',\n      type: 'boolean'\n    },\n    literalMidWordUnderscores: {\n      defaultValue: false,\n      describe: 'Parse midword underscores as literal underscores',\n      type: 'boolean'\n    },\n    strikethrough: {\n      defaultValue: false,\n      describe: 'Turn on/off strikethrough support',\n      type: 'boolean'\n    },\n    tables: {\n      defaultValue: false,\n      describe: 'Turn on/off tables support',\n      type: 'boolean'\n    },\n    tablesHeaderId: {\n      defaultValue: false,\n      describe: 'Add an id to table headers',\n      type: 'boolean'\n    },\n    ghCodeBlocks: {\n      defaultValue: true,\n      describe: 'Turn on/off GFM fenced code blocks support',\n      type: 'boolean'\n    },\n    tasklists: {\n      defaultValue: false,\n      describe: 'Turn on/off GFM tasklist support',\n      type: 'boolean'\n    },\n    smoothLivePreview: {\n      defaultValue: false,\n      describe: 'Prevents weird effects in live previews due to incomplete input',\n      type: 'boolean'\n    },\n    smartIndentationFix: {\n      defaultValue: false,\n      description: 'Tries to smartly fix indentation in es6 strings',\n      type: 'boolean'\n    },\n    disableForced4SpacesIndentedSublists: {\n      defaultValue: false,\n      description: 'Disables the requirement of indenting nested sublists by 4 spaces',\n      type: 'boolean'\n    },\n    simpleLineBreaks: {\n      defaultValue: false,\n      description: 'Parses simple line breaks as <br> (GFM Style)',\n      type: 'boolean'\n    },\n    requireSpaceBeforeHeadingText: {\n      defaultValue: false,\n      description: 'Makes adding a space between `#` and the header text mandatory (GFM Style)',\n      type: 'boolean'\n    },\n    ghMentions: {\n      defaultValue: false,\n      description: 'Enables github @mentions',\n      type: 'boolean'\n    }\n  };\n  if (simple === false) {\n    return JSON.parse(JSON.stringify(defaultOptions));\n  }\n  var ret = {};\n  for (var opt in defaultOptions) {\n    if (defaultOptions.hasOwnProperty(opt)) {\n      ret[opt] = defaultOptions[opt].defaultValue;\n    }\n  }\n  return ret;\n}\n\nfunction allOptionsOn() {\n  'use strict';\n  var options = getDefaultOpts(true),\n      ret = {};\n  for (var opt in options) {\n    if (options.hasOwnProperty(opt)) {\n      ret[opt] = true;\n    }\n  }\n  return ret;\n}\n\r\n/**\n * Created by Tivie on 06-01-2015.\n */\n\n// Private properties\nvar showdown = {},\n    parsers = {},\n    extensions = {},\n    globalOptions = getDefaultOpts(true),\n    setFlavor = 'vanilla',\n    flavor = {\n      github: {\n        omitExtraWLInCodeBlocks:              true,\n        prefixHeaderId:                       'user-content-',\n        simplifiedAutoLink:                   true,\n        excludeTrailingPunctuationFromURLs:   true,\n        literalMidWordUnderscores:            true,\n        strikethrough:                        true,\n        tables:                               true,\n        tablesHeaderId:                       true,\n        ghCodeBlocks:                         true,\n        tasklists:                            true,\n        disableForced4SpacesIndentedSublists: true,\n        simpleLineBreaks:                     true,\n        requireSpaceBeforeHeadingText:        true,\n        ghCompatibleHeaderId:                 true,\n        ghMentions:                           true\n      },\n      vanilla: getDefaultOpts(true),\n      allOn: allOptionsOn()\n    };\n\n/**\n * helper namespace\n * @type {{}}\n */\nshowdown.helper = {};\n\n/**\n * TODO LEGACY SUPPORT CODE\n * @type {{}}\n */\nshowdown.extensions = {};\n\n/**\n * Set a global option\n * @static\n * @param {string} key\n * @param {*} value\n * @returns {showdown}\n */\nshowdown.setOption = function (key, value) {\n  'use strict';\n  globalOptions[key] = value;\n  return this;\n};\n\n/**\n * Get a global option\n * @static\n * @param {string} key\n * @returns {*}\n */\nshowdown.getOption = function (key) {\n  'use strict';\n  return globalOptions[key];\n};\n\n/**\n * Get the global options\n * @static\n * @returns {{}}\n */\nshowdown.getOptions = function () {\n  'use strict';\n  return globalOptions;\n};\n\n/**\n * Reset global options to the default values\n * @static\n */\nshowdown.resetOptions = function () {\n  'use strict';\n  globalOptions = getDefaultOpts(true);\n};\n\n/**\n * Set the flavor showdown should use as default\n * @param {string} name\n */\nshowdown.setFlavor = function (name) {\n  'use strict';\n  if (!flavor.hasOwnProperty(name)) {\n    throw Error(name + ' flavor was not found');\n  }\n  var preset = flavor[name];\n  setFlavor = name;\n  for (var option in preset) {\n    if (preset.hasOwnProperty(option)) {\n      globalOptions[option] = preset[option];\n    }\n  }\n};\n\n/**\n * Get the currently set flavor\n * @returns {string}\n */\nshowdown.getFlavor = function () {\n  'use strict';\n  return setFlavor;\n};\n\n/**\n * Get the options of a specified flavor. Returns undefined if the flavor was not found\n * @param {string} name Name of the flavor\n * @returns {{}|undefined}\n */\nshowdown.getFlavorOptions = function (name) {\n  'use strict';\n  if (flavor.hasOwnProperty(name)) {\n    return flavor[name];\n  }\n};\n\n/**\n * Get the default options\n * @static\n * @param {boolean} [simple=true]\n * @returns {{}}\n */\nshowdown.getDefaultOptions = function (simple) {\n  'use strict';\n  return getDefaultOpts(simple);\n};\n\n/**\n * Get or set a subParser\n *\n * subParser(name)       - Get a registered subParser\n * subParser(name, func) - Register a subParser\n * @static\n * @param {string} name\n * @param {function} [func]\n * @returns {*}\n */\nshowdown.subParser = function (name, func) {\n  'use strict';\n  if (showdown.helper.isString(name)) {\n    if (typeof func !== 'undefined') {\n      parsers[name] = func;\n    } else {\n      if (parsers.hasOwnProperty(name)) {\n        return parsers[name];\n      } else {\n        throw Error('SubParser named ' + name + ' not registered!');\n      }\n    }\n  }\n};\n\n/**\n * Gets or registers an extension\n * @static\n * @param {string} name\n * @param {object|function=} ext\n * @returns {*}\n */\nshowdown.extension = function (name, ext) {\n  'use strict';\n\n  if (!showdown.helper.isString(name)) {\n    throw Error('Extension \\'name\\' must be a string');\n  }\n\n  name = showdown.helper.stdExtName(name);\n\n  // Getter\n  if (showdown.helper.isUndefined(ext)) {\n    if (!extensions.hasOwnProperty(name)) {\n      throw Error('Extension named ' + name + ' is not registered!');\n    }\n    return extensions[name];\n\n    // Setter\n  } else {\n    // Expand extension if it's wrapped in a function\n    if (typeof ext === 'function') {\n      ext = ext();\n    }\n\n    // Ensure extension is an array\n    if (!showdown.helper.isArray(ext)) {\n      ext = [ext];\n    }\n\n    var validExtension = validate(ext, name);\n\n    if (validExtension.valid) {\n      extensions[name] = ext;\n    } else {\n      throw Error(validExtension.error);\n    }\n  }\n};\n\n/**\n * Gets all extensions registered\n * @returns {{}}\n */\nshowdown.getAllExtensions = function () {\n  'use strict';\n  return extensions;\n};\n\n/**\n * Remove an extension\n * @param {string} name\n */\nshowdown.removeExtension = function (name) {\n  'use strict';\n  delete extensions[name];\n};\n\n/**\n * Removes all extensions\n */\nshowdown.resetExtensions = function () {\n  'use strict';\n  extensions = {};\n};\n\n/**\n * Validate extension\n * @param {array} extension\n * @param {string} name\n * @returns {{valid: boolean, error: string}}\n */\nfunction validate(extension, name) {\n  'use strict';\n\n  var errMsg = (name) ? 'Error in ' + name + ' extension->' : 'Error in unnamed extension',\n    ret = {\n      valid: true,\n      error: ''\n    };\n\n  if (!showdown.helper.isArray(extension)) {\n    extension = [extension];\n  }\n\n  for (var i = 0; i < extension.length; ++i) {\n    var baseMsg = errMsg + ' sub-extension ' + i + ': ',\n        ext = extension[i];\n    if (typeof ext !== 'object') {\n      ret.valid = false;\n      ret.error = baseMsg + 'must be an object, but ' + typeof ext + ' given';\n      return ret;\n    }\n\n    if (!showdown.helper.isString(ext.type)) {\n      ret.valid = false;\n      ret.error = baseMsg + 'property \"type\" must be a string, but ' + typeof ext.type + ' given';\n      return ret;\n    }\n\n    var type = ext.type = ext.type.toLowerCase();\n\n    // normalize extension type\n    if (type === 'language') {\n      type = ext.type = 'lang';\n    }\n\n    if (type === 'html') {\n      type = ext.type = 'output';\n    }\n\n    if (type !== 'lang' && type !== 'output' && type !== 'listener') {\n      ret.valid = false;\n      ret.error = baseMsg + 'type ' + type + ' is not recognized. Valid values: \"lang/language\", \"output/html\" or \"listener\"';\n      return ret;\n    }\n\n    if (type === 'listener') {\n      if (showdown.helper.isUndefined(ext.listeners)) {\n        ret.valid = false;\n        ret.error = baseMsg + '. Extensions of type \"listener\" must have a property called \"listeners\"';\n        return ret;\n      }\n    } else {\n      if (showdown.helper.isUndefined(ext.filter) && showdown.helper.isUndefined(ext.regex)) {\n        ret.valid = false;\n        ret.error = baseMsg + type + ' extensions must define either a \"regex\" property or a \"filter\" method';\n        return ret;\n      }\n    }\n\n    if (ext.listeners) {\n      if (typeof ext.listeners !== 'object') {\n        ret.valid = false;\n        ret.error = baseMsg + '\"listeners\" property must be an object but ' + typeof ext.listeners + ' given';\n        return ret;\n      }\n      for (var ln in ext.listeners) {\n        if (ext.listeners.hasOwnProperty(ln)) {\n          if (typeof ext.listeners[ln] !== 'function') {\n            ret.valid = false;\n            ret.error = baseMsg + '\"listeners\" property must be an hash of [event name]: [callback]. listeners.' + ln +\n              ' must be a function but ' + typeof ext.listeners[ln] + ' given';\n            return ret;\n          }\n        }\n      }\n    }\n\n    if (ext.filter) {\n      if (typeof ext.filter !== 'function') {\n        ret.valid = false;\n        ret.error = baseMsg + '\"filter\" must be a function, but ' + typeof ext.filter + ' given';\n        return ret;\n      }\n    } else if (ext.regex) {\n      if (showdown.helper.isString(ext.regex)) {\n        ext.regex = new RegExp(ext.regex, 'g');\n      }\n      if (!ext.regex instanceof RegExp) {\n        ret.valid = false;\n        ret.error = baseMsg + '\"regex\" property must either be a string or a RegExp object, but ' + typeof ext.regex + ' given';\n        return ret;\n      }\n      if (showdown.helper.isUndefined(ext.replace)) {\n        ret.valid = false;\n        ret.error = baseMsg + '\"regex\" extensions must implement a replace string or function';\n        return ret;\n      }\n    }\n  }\n  return ret;\n}\n\n/**\n * Validate extension\n * @param {object} ext\n * @returns {boolean}\n */\nshowdown.validateExtension = function (ext) {\n  'use strict';\n\n  var validateExtension = validate(ext, null);\n  if (!validateExtension.valid) {\n    console.warn(validateExtension.error);\n    return false;\n  }\n  return true;\n};\n\r\n/**\n * showdownjs helper functions\n */\n\nif (!showdown.hasOwnProperty('helper')) {\n  showdown.helper = {};\n}\n\n/**\n * Check if var is string\n * @static\n * @param {string} a\n * @returns {boolean}\n */\nshowdown.helper.isString = function isString(a) {\n  'use strict';\n  return (typeof a === 'string' || a instanceof String);\n};\n\n/**\n * Check if var is a function\n * @static\n * @param {string} a\n * @returns {boolean}\n */\nshowdown.helper.isFunction = function isFunction(a) {\n  'use strict';\n  var getType = {};\n  return a && getType.toString.call(a) === '[object Function]';\n};\n\n/**\n * ForEach helper function\n * @static\n * @param {*} obj\n * @param {function} callback\n */\nshowdown.helper.forEach = function forEach(obj, callback) {\n  'use strict';\n  if (typeof obj.forEach === 'function') {\n    obj.forEach(callback);\n  } else {\n    for (var i = 0; i < obj.length; i++) {\n      callback(obj[i], i, obj);\n    }\n  }\n};\n\n/**\n * isArray helper function\n * @static\n * @param {*} a\n * @returns {boolean}\n */\nshowdown.helper.isArray = function isArray(a) {\n  'use strict';\n  return a.constructor === Array;\n};\n\n/**\n * Check if value is undefined\n * @static\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n */\nshowdown.helper.isUndefined = function isUndefined(value) {\n  'use strict';\n  return typeof value === 'undefined';\n};\n\n/**\n * Standardidize extension name\n * @static\n * @param {string} s extension name\n * @returns {string}\n */\nshowdown.helper.stdExtName = function (s) {\n  'use strict';\n  return s.replace(/[_-]||\\s/g, '').toLowerCase();\n};\n\nfunction escapeCharactersCallback(wholeMatch, m1) {\n  'use strict';\n  var charCodeToEscape = m1.charCodeAt(0);\n  return '~E' + charCodeToEscape + 'E';\n}\n\n/**\n * Callback used to escape characters when passing through String.replace\n * @static\n * @param {string} wholeMatch\n * @param {string} m1\n * @returns {string}\n */\nshowdown.helper.escapeCharactersCallback = escapeCharactersCallback;\n\n/**\n * Escape characters in a string\n * @static\n * @param {string} text\n * @param {string} charsToEscape\n * @param {boolean} afterBackslash\n * @returns {XML|string|void|*}\n */\nshowdown.helper.escapeCharacters = function escapeCharacters(text, charsToEscape, afterBackslash) {\n  'use strict';\n  // First we have to escape the escape characters so that\n  // we can build a character class out of them\n  var regexString = '([' + charsToEscape.replace(/([\\[\\]\\\\])/g, '\\\\$1') + '])';\n\n  if (afterBackslash) {\n    regexString = '\\\\\\\\' + regexString;\n  }\n\n  var regex = new RegExp(regexString, 'g');\n  text = text.replace(regex, escapeCharactersCallback);\n\n  return text;\n};\n\nvar rgxFindMatchPos = function (str, left, right, flags) {\n  'use strict';\n  var f = flags || '',\n    g = f.indexOf('g') > -1,\n    x = new RegExp(left + '|' + right, 'g' + f.replace(/g/g, '')),\n    l = new RegExp(left, f.replace(/g/g, '')),\n    pos = [],\n    t, s, m, start, end;\n\n  do {\n    t = 0;\n    while ((m = x.exec(str))) {\n      if (l.test(m[0])) {\n        if (!(t++)) {\n          s = x.lastIndex;\n          start = s - m[0].length;\n        }\n      } else if (t) {\n        if (!--t) {\n          end = m.index + m[0].length;\n          var obj = {\n            left: {start: start, end: s},\n            match: {start: s, end: m.index},\n            right: {start: m.index, end: end},\n            wholeMatch: {start: start, end: end}\n          };\n          pos.push(obj);\n          if (!g) {\n            return pos;\n          }\n        }\n      }\n    }\n  } while (t && (x.lastIndex = s));\n\n  return pos;\n};\n\n/**\n * matchRecursiveRegExp\n *\n * (c) 2007 Steven Levithan <stevenlevithan.com>\n * MIT License\n *\n * Accepts a string to search, a left and right format delimiter\n * as regex patterns, and optional regex flags. Returns an array\n * of matches, allowing nested instances of left/right delimiters.\n * Use the \"g\" flag to return all matches, otherwise only the\n * first is returned. Be careful to ensure that the left and\n * right format delimiters produce mutually exclusive matches.\n * Backreferences are not supported within the right delimiter\n * due to how it is internally combined with the left delimiter.\n * When matching strings whose format delimiters are unbalanced\n * to the left or right, the output is intentionally as a\n * conventional regex library with recursion support would\n * produce, e.g. \"<<x>\" and \"<x>>\" both produce [\"x\"] when using\n * \"<\" and \">\" as the delimiters (both strings contain a single,\n * balanced instance of \"<x>\").\n *\n * examples:\n * matchRecursiveRegExp(\"test\", \"\\\\(\", \"\\\\)\")\n * returns: []\n * matchRecursiveRegExp(\"<t<<e>><s>>t<>\", \"<\", \">\", \"g\")\n * returns: [\"t<<e>><s>\", \"\"]\n * matchRecursiveRegExp(\"<div id=\\\"x\\\">test</div>\", \"<div\\\\b[^>]*>\", \"</div>\", \"gi\")\n * returns: [\"test\"]\n */\nshowdown.helper.matchRecursiveRegExp = function (str, left, right, flags) {\n  'use strict';\n\n  var matchPos = rgxFindMatchPos (str, left, right, flags),\n    results = [];\n\n  for (var i = 0; i < matchPos.length; ++i) {\n    results.push([\n      str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),\n      str.slice(matchPos[i].match.start, matchPos[i].match.end),\n      str.slice(matchPos[i].left.start, matchPos[i].left.end),\n      str.slice(matchPos[i].right.start, matchPos[i].right.end)\n    ]);\n  }\n  return results;\n};\n\n/**\n *\n * @param {string} str\n * @param {string|function} replacement\n * @param {string} left\n * @param {string} right\n * @param {string} flags\n * @returns {string}\n */\nshowdown.helper.replaceRecursiveRegExp = function (str, replacement, left, right, flags) {\n  'use strict';\n\n  if (!showdown.helper.isFunction(replacement)) {\n    var repStr = replacement;\n    replacement = function () {\n      return repStr;\n    };\n  }\n\n  var matchPos = rgxFindMatchPos(str, left, right, flags),\n      finalStr = str,\n      lng = matchPos.length;\n\n  if (lng > 0) {\n    var bits = [];\n    if (matchPos[0].wholeMatch.start !== 0) {\n      bits.push(str.slice(0, matchPos[0].wholeMatch.start));\n    }\n    for (var i = 0; i < lng; ++i) {\n      bits.push(\n        replacement(\n          str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),\n          str.slice(matchPos[i].match.start, matchPos[i].match.end),\n          str.slice(matchPos[i].left.start, matchPos[i].left.end),\n          str.slice(matchPos[i].right.start, matchPos[i].right.end)\n        )\n      );\n      if (i < lng - 1) {\n        bits.push(str.slice(matchPos[i].wholeMatch.end, matchPos[i + 1].wholeMatch.start));\n      }\n    }\n    if (matchPos[lng - 1].wholeMatch.end < str.length) {\n      bits.push(str.slice(matchPos[lng - 1].wholeMatch.end));\n    }\n    finalStr = bits.join('');\n  }\n  return finalStr;\n};\n\n/**\n * POLYFILLS\n */\n// use this instead of builtin is undefined for IE8 compatibility\nif (typeof(console) === 'undefined') {\n  console = {\n    warn: function (msg) {\n      'use strict';\n      alert(msg);\n    },\n    log: function (msg) {\n      'use strict';\n      alert(msg);\n    },\n    error: function (msg) {\n      'use strict';\n      throw msg;\n    }\n  };\n}\n\r\n/**\n * Created by Estevao on 31-05-2015.\n */\n\n/**\n * Showdown Converter class\n * @class\n * @param {object} [converterOptions]\n * @returns {Converter}\n */\nshowdown.Converter = function (converterOptions) {\n  'use strict';\n\n  var\n      /**\n       * Options used by this converter\n       * @private\n       * @type {{}}\n       */\n      options = {},\n\n      /**\n       * Language extensions used by this converter\n       * @private\n       * @type {Array}\n       */\n      langExtensions = [],\n\n      /**\n       * Output modifiers extensions used by this converter\n       * @private\n       * @type {Array}\n       */\n      outputModifiers = [],\n\n      /**\n       * Event listeners\n       * @private\n       * @type {{}}\n       */\n      listeners = {},\n\n      /**\n       * The flavor set in this converter\n       */\n      setConvFlavor = setFlavor;\n\n  _constructor();\n\n  /**\n   * Converter constructor\n   * @private\n   */\n  function _constructor() {\n    converterOptions = converterOptions || {};\n\n    for (var gOpt in globalOptions) {\n      if (globalOptions.hasOwnProperty(gOpt)) {\n        options[gOpt] = globalOptions[gOpt];\n      }\n    }\n\n    // Merge options\n    if (typeof converterOptions === 'object') {\n      for (var opt in converterOptions) {\n        if (converterOptions.hasOwnProperty(opt)) {\n          options[opt] = converterOptions[opt];\n        }\n      }\n    } else {\n      throw Error('Converter expects the passed parameter to be an object, but ' + typeof converterOptions +\n      ' was passed instead.');\n    }\n\n    if (options.extensions) {\n      showdown.helper.forEach(options.extensions, _parseExtension);\n    }\n  }\n\n  /**\n   * Parse extension\n   * @param {*} ext\n   * @param {string} [name='']\n   * @private\n   */\n  function _parseExtension(ext, name) {\n\n    name = name || null;\n    // If it's a string, the extension was previously loaded\n    if (showdown.helper.isString(ext)) {\n      ext = showdown.helper.stdExtName(ext);\n      name = ext;\n\n      // LEGACY_SUPPORT CODE\n      if (showdown.extensions[ext]) {\n        console.warn('DEPRECATION WARNING: ' + ext + ' is an old extension that uses a deprecated loading method.' +\n          'Please inform the developer that the extension should be updated!');\n        legacyExtensionLoading(showdown.extensions[ext], ext);\n        return;\n      // END LEGACY SUPPORT CODE\n\n      } else if (!showdown.helper.isUndefined(extensions[ext])) {\n        ext = extensions[ext];\n\n      } else {\n        throw Error('Extension \"' + ext + '\" could not be loaded. It was either not found or is not a valid extension.');\n      }\n    }\n\n    if (typeof ext === 'function') {\n      ext = ext();\n    }\n\n    if (!showdown.helper.isArray(ext)) {\n      ext = [ext];\n    }\n\n    var validExt = validate(ext, name);\n    if (!validExt.valid) {\n      throw Error(validExt.error);\n    }\n\n    for (var i = 0; i < ext.length; ++i) {\n      switch (ext[i].type) {\n\n        case 'lang':\n          langExtensions.push(ext[i]);\n          break;\n\n        case 'output':\n          outputModifiers.push(ext[i]);\n          break;\n      }\n      if (ext[i].hasOwnProperty('listeners')) {\n        for (var ln in ext[i].listeners) {\n          if (ext[i].listeners.hasOwnProperty(ln)) {\n            listen(ln, ext[i].listeners[ln]);\n          }\n        }\n      }\n    }\n\n  }\n\n  /**\n   * LEGACY_SUPPORT\n   * @param {*} ext\n   * @param {string} name\n   */\n  function legacyExtensionLoading(ext, name) {\n    if (typeof ext === 'function') {\n      ext = ext(new showdown.Converter());\n    }\n    if (!showdown.helper.isArray(ext)) {\n      ext = [ext];\n    }\n    var valid = validate(ext, name);\n\n    if (!valid.valid) {\n      throw Error(valid.error);\n    }\n\n    for (var i = 0; i < ext.length; ++i) {\n      switch (ext[i].type) {\n        case 'lang':\n          langExtensions.push(ext[i]);\n          break;\n        case 'output':\n          outputModifiers.push(ext[i]);\n          break;\n        default:// should never reach here\n          throw Error('Extension loader error: Type unrecognized!!!');\n      }\n    }\n  }\n\n  /**\n   * Listen to an event\n   * @param {string} name\n   * @param {function} callback\n   */\n  function listen(name, callback) {\n    if (!showdown.helper.isString(name)) {\n      throw Error('Invalid argument in converter.listen() method: name must be a string, but ' + typeof name + ' given');\n    }\n\n    if (typeof callback !== 'function') {\n      throw Error('Invalid argument in converter.listen() method: callback must be a function, but ' + typeof callback + ' given');\n    }\n\n    if (!listeners.hasOwnProperty(name)) {\n      listeners[name] = [];\n    }\n    listeners[name].push(callback);\n  }\n\n  function rTrimInputText(text) {\n    var rsp = text.match(/^\\s*/)[0].length,\n        rgx = new RegExp('^\\\\s{0,' + rsp + '}', 'gm');\n    return text.replace(rgx, '');\n  }\n\n  /**\n   * Dispatch an event\n   * @private\n   * @param {string} evtName Event name\n   * @param {string} text Text\n   * @param {{}} options Converter Options\n   * @param {{}} globals\n   * @returns {string}\n   */\n  this._dispatch = function dispatch (evtName, text, options, globals) {\n    if (listeners.hasOwnProperty(evtName)) {\n      for (var ei = 0; ei < listeners[evtName].length; ++ei) {\n        var nText = listeners[evtName][ei](evtName, text, this, options, globals);\n        if (nText && typeof nText !== 'undefined') {\n          text = nText;\n        }\n      }\n    }\n    return text;\n  };\n\n  /**\n   * Listen to an event\n   * @param {string} name\n   * @param {function} callback\n   * @returns {showdown.Converter}\n   */\n  this.listen = function (name, callback) {\n    listen(name, callback);\n    return this;\n  };\n\n  /**\n   * Converts a markdown string into HTML\n   * @param {string} text\n   * @returns {*}\n   */\n  this.makeHtml = function (text) {\n    //check if text is not falsy\n    if (!text) {\n      return text;\n    }\n\n    var globals = {\n      gHtmlBlocks:     [],\n      gHtmlMdBlocks:   [],\n      gHtmlSpans:      [],\n      gUrls:           {},\n      gTitles:         {},\n      gDimensions:     {},\n      gListLevel:      0,\n      hashLinkCounts:  {},\n      langExtensions:  langExtensions,\n      outputModifiers: outputModifiers,\n      converter:       this,\n      ghCodeBlocks:    []\n    };\n\n    // attacklab: Replace ~ with ~T\n    // This lets us use tilde as an escape char to avoid md5 hashes\n    // The choice of character is arbitrary; anything that isn't\n    // magic in Markdown will work.\n    text = text.replace(/~/g, '~T');\n\n    // attacklab: Replace $ with ~D\n    // RegExp interprets $ as a special character\n    // when it's in a replacement string\n    text = text.replace(/\\$/g, '~D');\n\n    // Standardize line endings\n    text = text.replace(/\\r\\n/g, '\\n'); // DOS to Unix\n    text = text.replace(/\\r/g, '\\n'); // Mac to Unix\n\n    // Stardardize line spaces (nbsp causes trouble in older browsers and some regex flavors)\n    text = text.replace(/\\u00A0/g, ' ');\n\n    if (options.smartIndentationFix) {\n      text = rTrimInputText(text);\n    }\n\n    // Make sure text begins and ends with a couple of newlines:\n    text = '\\n\\n' + text + '\\n\\n';\n\n    // detab\n    text = showdown.subParser('detab')(text, options, globals);\n\n    // stripBlankLines\n    text = showdown.subParser('stripBlankLines')(text, options, globals);\n\n    //run languageExtensions\n    showdown.helper.forEach(langExtensions, function (ext) {\n      text = showdown.subParser('runExtension')(ext, text, options, globals);\n    });\n\n    // run the sub parsers\n    text = showdown.subParser('hashPreCodeTags')(text, options, globals);\n    text = showdown.subParser('githubCodeBlocks')(text, options, globals);\n    text = showdown.subParser('hashHTMLBlocks')(text, options, globals);\n    text = showdown.subParser('hashHTMLSpans')(text, options, globals);\n    text = showdown.subParser('stripLinkDefinitions')(text, options, globals);\n    text = showdown.subParser('blockGamut')(text, options, globals);\n    text = showdown.subParser('unhashHTMLSpans')(text, options, globals);\n    text = showdown.subParser('unescapeSpecialChars')(text, options, globals);\n\n    // attacklab: Restore dollar signs\n    text = text.replace(/~D/g, '$$');\n\n    // attacklab: Restore tildes\n    text = text.replace(/~T/g, '~');\n\n    // Run output modifiers\n    showdown.helper.forEach(outputModifiers, function (ext) {\n      text = showdown.subParser('runExtension')(ext, text, options, globals);\n    });\n\n    return text;\n  };\n\n  /**\n   * Set an option of this Converter instance\n   * @param {string} key\n   * @param {*} value\n   */\n  this.setOption = function (key, value) {\n    options[key] = value;\n  };\n\n  /**\n   * Get the option of this Converter instance\n   * @param {string} key\n   * @returns {*}\n   */\n  this.getOption = function (key) {\n    return options[key];\n  };\n\n  /**\n   * Get the options of this Converter instance\n   * @returns {{}}\n   */\n  this.getOptions = function () {\n    return options;\n  };\n\n  /**\n   * Add extension to THIS converter\n   * @param {{}} extension\n   * @param {string} [name=null]\n   */\n  this.addExtension = function (extension, name) {\n    name = name || null;\n    _parseExtension(extension, name);\n  };\n\n  /**\n   * Use a global registered extension with THIS converter\n   * @param {string} extensionName Name of the previously registered extension\n   */\n  this.useExtension = function (extensionName) {\n    _parseExtension(extensionName);\n  };\n\n  /**\n   * Set the flavor THIS converter should use\n   * @param {string} name\n   */\n  this.setFlavor = function (name) {\n    if (!flavor.hasOwnProperty(name)) {\n      throw Error(name + ' flavor was not found');\n    }\n    var preset = flavor[name];\n    setConvFlavor = name;\n    for (var option in preset) {\n      if (preset.hasOwnProperty(option)) {\n        options[option] = preset[option];\n      }\n    }\n  };\n\n  /**\n   * Get the currently set flavor of this converter\n   * @returns {string}\n   */\n  this.getFlavor = function () {\n    return setConvFlavor;\n  };\n\n  /**\n   * Remove an extension from THIS converter.\n   * Note: This is a costly operation. It's better to initialize a new converter\n   * and specify the extensions you wish to use\n   * @param {Array} extension\n   */\n  this.removeExtension = function (extension) {\n    if (!showdown.helper.isArray(extension)) {\n      extension = [extension];\n    }\n    for (var a = 0; a < extension.length; ++a) {\n      var ext = extension[a];\n      for (var i = 0; i < langExtensions.length; ++i) {\n        if (langExtensions[i] === ext) {\n          langExtensions[i].splice(i, 1);\n        }\n      }\n      for (var ii = 0; ii < outputModifiers.length; ++i) {\n        if (outputModifiers[ii] === ext) {\n          outputModifiers[ii].splice(i, 1);\n        }\n      }\n    }\n  };\n\n  /**\n   * Get all extension of THIS converter\n   * @returns {{language: Array, output: Array}}\n   */\n  this.getAllExtensions = function () {\n    return {\n      language: langExtensions,\n      output: outputModifiers\n    };\n  };\n};\n\r\n/**\n * Turn Markdown link shortcuts into XHTML <a> tags.\n */\nshowdown.subParser('anchors', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('anchors.before', text, options, globals);\n\n  var writeAnchorTag = function (wholeMatch, m1, m2, m3, m4, m5, m6, m7) {\n    if (showdown.helper.isUndefined(m7)) {\n      m7 = '';\n    }\n    wholeMatch = m1;\n    var linkText = m2,\n        linkId = m3.toLowerCase(),\n        url = m4,\n        title = m7;\n\n    if (!url) {\n      if (!linkId) {\n        // lower-case and turn embedded newlines into spaces\n        linkId = linkText.toLowerCase().replace(/ ?\\n/g, ' ');\n      }\n      url = '#' + linkId;\n\n      if (!showdown.helper.isUndefined(globals.gUrls[linkId])) {\n        url = globals.gUrls[linkId];\n        if (!showdown.helper.isUndefined(globals.gTitles[linkId])) {\n          title = globals.gTitles[linkId];\n        }\n      } else {\n        if (wholeMatch.search(/\\(\\s*\\)$/m) > -1) {\n          // Special case for explicit empty url\n          url = '';\n        } else {\n          return wholeMatch;\n        }\n      }\n    }\n\n    url = showdown.helper.escapeCharacters(url, '*_', false);\n    var result = '<a href=\"' + url + '\"';\n\n    if (title !== '' && title !== null) {\n      title = title.replace(/\"/g, '&quot;');\n      title = showdown.helper.escapeCharacters(title, '*_', false);\n      result += ' title=\"' + title + '\"';\n    }\n\n    result += '>' + linkText + '</a>';\n\n    return result;\n  };\n\n  // First, handle reference-style links: [link text] [id]\n  text = text.replace(/(\\[((?:\\[[^\\]]*]|[^\\[\\]])*)][ ]?(?:\\n[ ]*)?\\[(.*?)])()()()()/g, writeAnchorTag);\n\n  // Next, inline-style links: [link text](url \"optional title\")\n  text = text.replace(/(\\[((?:\\[[^\\]]*]|[^\\[\\]])*)]\\([ \\t]*()<?(.*?(?:\\(.*?\\).*?)?)>?[ \\t]*((['\"])(.*?)\\6[ \\t]*)?\\))/g,\n                      writeAnchorTag);\n\n  // handle reference-style shortcuts: [link text]\n  // These must come last in case you've also got [link test][1]\n  // or [link test](/foo)\n  text = text.replace(/(\\[([^\\[\\]]+)])()()()()()/g, writeAnchorTag);\n\n  // Lastly handle GithubMentions if option is enabled\n  if (options.ghMentions) {\n    text = text.replace(/(^|\\s)(\\\\)?(@([a-z\\d\\-]+))(?=[.!?;,[\\]()]|\\s|$)/gmi, function (wm, st, escape, mentions, username) {\n      if (escape === '\\\\') {\n        return st + mentions;\n      }\n      return st + '<a href=\"https://www.github.com/' + username + '\">' + mentions + '</a>';\n    });\n  }\n\n  text = globals.converter._dispatch('anchors.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('autoLinks', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('autoLinks.before', text, options, globals);\n\n  var simpleURLRegex  = /\\b(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+\\.[^'\">\\s]+)()(?=\\s|$)(?![\"<>])/gi,\n      simpleURLRegex2 = /\\b(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+\\.[^'\">\\s]+?)([.!?()]?)(?=\\s|$)(?![\"<>])/gi,\n      delimUrlRegex   = /<(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+)>/gi,\n      simpleMailRegex = /(?:^|\\s)([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+)(?:$|\\s)/gi,\n      delimMailRegex  = /<(?:mailto:)?([-.\\w]+@[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+)>/gi;\n\n  text = text.replace(delimUrlRegex, replaceLink);\n  text = text.replace(delimMailRegex, replaceMail);\n  // simpleURLRegex  = /\\b(((https?|ftp|dict):\\/\\/|www\\.)[-.+~:?#@!$&'()*,;=[\\]\\w]+)\\b/gi,\n  // Email addresses: <address@domain.foo>\n\n  if (options.simplifiedAutoLink) {\n    if (options.excludeTrailingPunctuationFromURLs) {\n      text = text.replace(simpleURLRegex2, replaceLink);\n    } else {\n      text = text.replace(simpleURLRegex, replaceLink);\n    }\n    text = text.replace(simpleMailRegex, replaceMail);\n  }\n\n  function replaceLink(wm, link, m2, m3, trailingPunctuation) {\n    var lnkTxt = link,\n        append = '';\n    if (/^www\\./i.test(link)) {\n      link = link.replace(/^www\\./i, 'http://www.');\n    }\n    if (options.excludeTrailingPunctuationFromURLs && trailingPunctuation) {\n      append = trailingPunctuation;\n    }\n    return '<a href=\"' + link + '\">' + lnkTxt + '</a>' + append;\n  }\n\n  function replaceMail(wholeMatch, mail) {\n    var unescapedStr = showdown.subParser('unescapeSpecialChars')(mail);\n    return showdown.subParser('encodeEmailAddress')(unescapedStr);\n  }\n\n  text = globals.converter._dispatch('autoLinks.after', text, options, globals);\n\n  return text;\n});\n\r\n/**\n * These are all the transformations that form block-level\n * tags like paragraphs, headers, and list items.\n */\nshowdown.subParser('blockGamut', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('blockGamut.before', text, options, globals);\n\n  // we parse blockquotes first so that we can have headings and hrs\n  // inside blockquotes\n  text = showdown.subParser('blockQuotes')(text, options, globals);\n  text = showdown.subParser('headers')(text, options, globals);\n\n  // Do Horizontal Rules:\n  var key = showdown.subParser('hashBlock')('<hr />', options, globals);\n  text = text.replace(/^ {0,2}( ?-){3,}[ \\t]*$/gm, key);\n  text = text.replace(/^ {0,2}( ?\\*){3,}[ \\t]*$/gm, key);\n  text = text.replace(/^ {0,2}( ?_){3,}[ \\t]*$/gm, key);\n\n  text = showdown.subParser('lists')(text, options, globals);\n  text = showdown.subParser('codeBlocks')(text, options, globals);\n  text = showdown.subParser('tables')(text, options, globals);\n\n  // We already ran _HashHTMLBlocks() before, in Markdown(), but that\n  // was to escape raw HTML in the original Markdown source. This time,\n  // we're escaping the markup we've just created, so that we don't wrap\n  // <p> tags around block-level tags.\n  text = showdown.subParser('hashHTMLBlocks')(text, options, globals);\n  text = showdown.subParser('paragraphs')(text, options, globals);\n\n  text = globals.converter._dispatch('blockGamut.after', text, options, globals);\n\n  return text;\n});\n\r\nshowdown.subParser('blockQuotes', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('blockQuotes.before', text, options, globals);\n\n  text = text.replace(/((^ {0,3}>[ \\t]?.+\\n(.+\\n)*\\n*)+)/gm, function (wholeMatch, m1) {\n    var bq = m1;\n\n    // attacklab: hack around Konqueror 3.5.4 bug:\n    // \"----------bug\".replace(/^-/g,\"\") == \"bug\"\n    bq = bq.replace(/^[ \\t]*>[ \\t]?/gm, '~0'); // trim one level of quoting\n\n    // attacklab: clean up hack\n    bq = bq.replace(/~0/g, '');\n\n    bq = bq.replace(/^[ \\t]+$/gm, ''); // trim whitespace-only lines\n    bq = showdown.subParser('githubCodeBlocks')(bq, options, globals);\n    bq = showdown.subParser('blockGamut')(bq, options, globals); // recurse\n\n    bq = bq.replace(/(^|\\n)/g, '$1  ');\n    // These leading spaces screw with <pre> content, so we need to fix that:\n    bq = bq.replace(/(\\s*<pre>[^\\r]+?<\\/pre>)/gm, function (wholeMatch, m1) {\n      var pre = m1;\n      // attacklab: hack around Konqueror 3.5.4 bug:\n      pre = pre.replace(/^  /mg, '~0');\n      pre = pre.replace(/~0/g, '');\n      return pre;\n    });\n\n    return showdown.subParser('hashBlock')('<blockquote>\\n' + bq + '\\n</blockquote>', options, globals);\n  });\n\n  text = globals.converter._dispatch('blockQuotes.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Process Markdown `<pre><code>` blocks.\n */\nshowdown.subParser('codeBlocks', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('codeBlocks.before', text, options, globals);\n\n  // sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug\n  text += '~0';\n\n  var pattern = /(?:\\n\\n|^)((?:(?:[ ]{4}|\\t).*\\n+)+)(\\n*[ ]{0,3}[^ \\t\\n]|(?=~0))/g;\n  text = text.replace(pattern, function (wholeMatch, m1, m2) {\n    var codeblock = m1,\n        nextChar = m2,\n        end = '\\n';\n\n    codeblock = showdown.subParser('outdent')(codeblock);\n    codeblock = showdown.subParser('encodeCode')(codeblock);\n    codeblock = showdown.subParser('detab')(codeblock);\n    codeblock = codeblock.replace(/^\\n+/g, ''); // trim leading newlines\n    codeblock = codeblock.replace(/\\n+$/g, ''); // trim trailing newlines\n\n    if (options.omitExtraWLInCodeBlocks) {\n      end = '';\n    }\n\n    codeblock = '<pre><code>' + codeblock + end + '</code></pre>';\n\n    return showdown.subParser('hashBlock')(codeblock, options, globals) + nextChar;\n  });\n\n  // strip sentinel\n  text = text.replace(/~0/, '');\n\n  text = globals.converter._dispatch('codeBlocks.after', text, options, globals);\n  return text;\n});\n\r\n/**\n *\n *   *  Backtick quotes are used for <code></code> spans.\n *\n *   *  You can use multiple backticks as the delimiters if you want to\n *     include literal backticks in the code span. So, this input:\n *\n *         Just type ``foo `bar` baz`` at the prompt.\n *\n *       Will translate to:\n *\n *         <p>Just type <code>foo `bar` baz</code> at the prompt.</p>\n *\n *    There's no arbitrary limit to the number of backticks you\n *    can use as delimters. If you need three consecutive backticks\n *    in your code, use four for delimiters, etc.\n *\n *  *  You can use spaces to get literal backticks at the edges:\n *\n *         ... type `` `bar` `` ...\n *\n *       Turns to:\n *\n *         ... type <code>`bar`</code> ...\n */\nshowdown.subParser('codeSpans', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('codeSpans.before', text, options, globals);\n\n  /*\n   text = text.replace(/\n   (^|[^\\\\])\t\t\t\t\t// Character before opening ` can't be a backslash\n   (`+)\t\t\t\t\t\t// $2 = Opening run of `\n   (\t\t\t\t\t\t\t// $3 = The code block\n   [^\\r]*?\n   [^`]\t\t\t\t\t// attacklab: work around lack of lookbehind\n   )\n   \\2\t\t\t\t\t\t\t// Matching closer\n   (?!`)\n   /gm, function(){...});\n   */\n\n  if (typeof(text) === 'undefined') {\n    text = '';\n  }\n  text = text.replace(/(^|[^\\\\])(`+)([^\\r]*?[^`])\\2(?!`)/gm,\n    function (wholeMatch, m1, m2, m3) {\n      var c = m3;\n      c = c.replace(/^([ \\t]*)/g, '');\t// leading whitespace\n      c = c.replace(/[ \\t]*$/g, '');\t// trailing whitespace\n      c = showdown.subParser('encodeCode')(c);\n      return m1 + '<code>' + c + '</code>';\n    }\n  );\n\n  text = globals.converter._dispatch('codeSpans.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Convert all tabs to spaces\n */\nshowdown.subParser('detab', function (text) {\n  'use strict';\n\n  // expand first n-1 tabs\n  text = text.replace(/\\t(?=\\t)/g, '    '); // g_tab_width\n\n  // replace the nth with two sentinels\n  text = text.replace(/\\t/g, '~A~B');\n\n  // use the sentinel to anchor our regex so it doesn't explode\n  text = text.replace(/~B(.+?)~A/g, function (wholeMatch, m1) {\n    var leadingText = m1,\n        numSpaces = 4 - leadingText.length % 4;  // g_tab_width\n\n    // there *must* be a better way to do this:\n    for (var i = 0; i < numSpaces; i++) {\n      leadingText += ' ';\n    }\n\n    return leadingText;\n  });\n\n  // clean up sentinels\n  text = text.replace(/~A/g, '    ');  // g_tab_width\n  text = text.replace(/~B/g, '');\n\n  return text;\n\n});\n\r\n/**\n * Smart processing for ampersands and angle brackets that need to be encoded.\n */\nshowdown.subParser('encodeAmpsAndAngles', function (text) {\n  'use strict';\n  // Ampersand-encoding based entirely on Nat Irons's Amputator MT plugin:\n  // http://bumppo.net/projects/amputator/\n  text = text.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\\w+);)/g, '&amp;');\n\n  // Encode naked <'s\n  text = text.replace(/<(?![a-z\\/?\\$!])/gi, '&lt;');\n\n  return text;\n});\n\r\n/**\n * Returns the string, with after processing the following backslash escape sequences.\n *\n * attacklab: The polite way to do this is with the new escapeCharacters() function:\n *\n *    text = escapeCharacters(text,\"\\\\\",true);\n *    text = escapeCharacters(text,\"`*_{}[]()>#+-.!\",true);\n *\n * ...but we're sidestepping its use of the (slow) RegExp constructor\n * as an optimization for Firefox.  This function gets called a LOT.\n */\nshowdown.subParser('encodeBackslashEscapes', function (text) {\n  'use strict';\n  text = text.replace(/\\\\(\\\\)/g, showdown.helper.escapeCharactersCallback);\n  text = text.replace(/\\\\([`*_{}\\[\\]()>#+-.!])/g, showdown.helper.escapeCharactersCallback);\n  return text;\n});\n\r\n/**\n * Encode/escape certain characters inside Markdown code runs.\n * The point is that in code, these characters are literals,\n * and lose their special Markdown meanings.\n */\nshowdown.subParser('encodeCode', function (text) {\n  'use strict';\n\n  // Encode all ampersands; HTML entities are not\n  // entities within a Markdown code span.\n  text = text.replace(/&/g, '&amp;');\n\n  // Do the angle bracket song and dance:\n  text = text.replace(/</g, '&lt;');\n  text = text.replace(/>/g, '&gt;');\n\n  // Now, escape characters that are magic in Markdown:\n  text = showdown.helper.escapeCharacters(text, '*_{}[]\\\\', false);\n\n  // jj the line above breaks this:\n  //---\n  //* Item\n  //   1. Subitem\n  //            special char: *\n  // ---\n\n  return text;\n});\n\r\n/**\n *  Input: an email address, e.g. \"foo@example.com\"\n *\n *  Output: the email address as a mailto link, with each character\n *    of the address encoded as either a decimal or hex entity, in\n *    the hopes of foiling most address harvesting spam bots. E.g.:\n *\n *    <a href=\"&#x6D;&#97;&#105;&#108;&#x74;&#111;:&#102;&#111;&#111;&#64;&#101;\n *       x&#x61;&#109;&#x70;&#108;&#x65;&#x2E;&#99;&#111;&#109;\">&#102;&#111;&#111;\n *       &#64;&#101;x&#x61;&#109;&#x70;&#108;&#x65;&#x2E;&#99;&#111;&#109;</a>\n *\n *  Based on a filter by Matthew Wickline, posted to the BBEdit-Talk\n *  mailing list: <http://tinyurl.com/yu7ue>\n *\n */\nshowdown.subParser('encodeEmailAddress', function (addr) {\n  'use strict';\n\n  var encode = [\n    function (ch) {\n      return '&#' + ch.charCodeAt(0) + ';';\n    },\n    function (ch) {\n      return '&#x' + ch.charCodeAt(0).toString(16) + ';';\n    },\n    function (ch) {\n      return ch;\n    }\n  ];\n\n  addr = 'mailto:' + addr;\n\n  addr = addr.replace(/./g, function (ch) {\n    if (ch === '@') {\n      // this *must* be encoded. I insist.\n      ch = encode[Math.floor(Math.random() * 2)](ch);\n    } else if (ch !== ':') {\n      // leave ':' alone (to spot mailto: later)\n      var r = Math.random();\n      // roughly 10% raw, 45% hex, 45% dec\n      ch = (\n        r > 0.9 ? encode[2](ch) : r > 0.45 ? encode[1](ch) : encode[0](ch)\n      );\n    }\n    return ch;\n  });\n\n  addr = '<a href=\"' + addr + '\">' + addr + '</a>';\n  addr = addr.replace(/\">.+:/g, '\">'); // strip the mailto: from the visible part\n\n  return addr;\n});\n\r\n/**\n * Within tags -- meaning between < and > -- encode [\\ ` * _] so they\n * don't conflict with their use in Markdown for code, italics and strong.\n */\nshowdown.subParser('escapeSpecialCharsWithinTagAttributes', function (text) {\n  'use strict';\n\n  // Build a regex to find HTML tags and comments.  See Friedl's\n  // \"Mastering Regular Expressions\", 2nd Ed., pp. 200-201.\n  var regex = /(<[a-z\\/!$](\"[^\"]*\"|'[^']*'|[^'\">])*>|<!(--.*?--\\s*)+>)/gi;\n\n  text = text.replace(regex, function (wholeMatch) {\n    var tag = wholeMatch.replace(/(.)<\\/?code>(?=.)/g, '$1`');\n    tag = showdown.helper.escapeCharacters(tag, '\\\\`*_', false);\n    return tag;\n  });\n\n  return text;\n});\n\r\n/**\n * Handle github codeblocks prior to running HashHTML so that\n * HTML contained within the codeblock gets escaped properly\n * Example:\n * ```ruby\n *     def hello_world(x)\n *       puts \"Hello, #{x}\"\n *     end\n * ```\n */\nshowdown.subParser('githubCodeBlocks', function (text, options, globals) {\n  'use strict';\n\n  // early exit if option is not enabled\n  if (!options.ghCodeBlocks) {\n    return text;\n  }\n\n  text = globals.converter._dispatch('githubCodeBlocks.before', text, options, globals);\n\n  text += '~0';\n\n  text = text.replace(/(?:^|\\n)```(.*)\\n([\\s\\S]*?)\\n```/g, function (wholeMatch, language, codeblock) {\n    var end = (options.omitExtraWLInCodeBlocks) ? '' : '\\n';\n\n    // First parse the github code block\n    codeblock = showdown.subParser('encodeCode')(codeblock);\n    codeblock = showdown.subParser('detab')(codeblock);\n    codeblock = codeblock.replace(/^\\n+/g, ''); // trim leading newlines\n    codeblock = codeblock.replace(/\\n+$/g, ''); // trim trailing whitespace\n\n    codeblock = '<pre><code' + (language ? ' class=\"' + language + ' language-' + language + '\"' : '') + '>' + codeblock + end + '</code></pre>';\n\n    codeblock = showdown.subParser('hashBlock')(codeblock, options, globals);\n\n    // Since GHCodeblocks can be false positives, we need to\n    // store the primitive text and the parsed text in a global var,\n    // and then return a token\n    return '\\n\\n~G' + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + 'G\\n\\n';\n  });\n\n  // attacklab: strip sentinel\n  text = text.replace(/~0/, '');\n\n  return globals.converter._dispatch('githubCodeBlocks.after', text, options, globals);\n});\n\r\nshowdown.subParser('hashBlock', function (text, options, globals) {\n  'use strict';\n  text = text.replace(/(^\\n+|\\n+$)/g, '');\n  return '\\n\\n~K' + (globals.gHtmlBlocks.push(text) - 1) + 'K\\n\\n';\n});\n\r\nshowdown.subParser('hashElement', function (text, options, globals) {\n  'use strict';\n\n  return function (wholeMatch, m1) {\n    var blockText = m1;\n\n    // Undo double lines\n    blockText = blockText.replace(/\\n\\n/g, '\\n');\n    blockText = blockText.replace(/^\\n/, '');\n\n    // strip trailing blank lines\n    blockText = blockText.replace(/\\n+$/g, '');\n\n    // Replace the element text with a marker (\"~KxK\" where x is its key)\n    blockText = '\\n\\n~K' + (globals.gHtmlBlocks.push(blockText) - 1) + 'K\\n\\n';\n\n    return blockText;\n  };\n});\n\r\nshowdown.subParser('hashHTMLBlocks', function (text, options, globals) {\n  'use strict';\n\n  var blockTags = [\n      'pre',\n      'div',\n      'h1',\n      'h2',\n      'h3',\n      'h4',\n      'h5',\n      'h6',\n      'blockquote',\n      'table',\n      'dl',\n      'ol',\n      'ul',\n      'script',\n      'noscript',\n      'form',\n      'fieldset',\n      'iframe',\n      'math',\n      'style',\n      'section',\n      'header',\n      'footer',\n      'nav',\n      'article',\n      'aside',\n      'address',\n      'audio',\n      'canvas',\n      'figure',\n      'hgroup',\n      'output',\n      'video',\n      'p'\n    ],\n    repFunc = function (wholeMatch, match, left, right) {\n      var txt = wholeMatch;\n      // check if this html element is marked as markdown\n      // if so, it's contents should be parsed as markdown\n      if (left.search(/\\bmarkdown\\b/) !== -1) {\n        txt = left + globals.converter.makeHtml(match) + right;\n      }\n      return '\\n\\n~K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\\n\\n';\n    };\n\n  for (var i = 0; i < blockTags.length; ++i) {\n    text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '^ {0,3}<' + blockTags[i] + '\\\\b[^>]*>', '</' + blockTags[i] + '>', 'gim');\n  }\n\n  // HR SPECIAL CASE\n  text = text.replace(/(\\n {0,3}(<(hr)\\b([^<>])*?\\/?>)[ \\t]*(?=\\n{2,}))/g,\n    showdown.subParser('hashElement')(text, options, globals));\n\n  // Special case for standalone HTML comments\n  text = showdown.helper.replaceRecursiveRegExp(text, function (txt) {\n    return '\\n\\n~K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\\n\\n';\n  }, '^ {0,3}<!--', '-->', 'gm');\n\n  // PHP and ASP-style processor instructions (<?...?> and <%...%>)\n  text = text.replace(/(?:\\n\\n)( {0,3}(?:<([?%])[^\\r]*?\\2>)[ \\t]*(?=\\n{2,}))/g,\n    showdown.subParser('hashElement')(text, options, globals));\n\n  return text;\n});\n\r\n/**\n * Hash span elements that should not be parsed as markdown\n */\nshowdown.subParser('hashHTMLSpans', function (text, config, globals) {\n  'use strict';\n\n  var matches = showdown.helper.matchRecursiveRegExp(text, '<code\\\\b[^>]*>', '</code>', 'gi');\n\n  for (var i = 0; i < matches.length; ++i) {\n    text = text.replace(matches[i][0], '~C' + (globals.gHtmlSpans.push(matches[i][0]) - 1) + 'C');\n  }\n  return text;\n});\n\n/**\n * Unhash HTML spans\n */\nshowdown.subParser('unhashHTMLSpans', function (text, config, globals) {\n  'use strict';\n\n  for (var i = 0; i < globals.gHtmlSpans.length; ++i) {\n    text = text.replace('~C' + i + 'C', globals.gHtmlSpans[i]);\n  }\n\n  return text;\n});\n\r\n/**\n * Hash span elements that should not be parsed as markdown\n */\nshowdown.subParser('hashPreCodeTags', function (text, config, globals) {\n  'use strict';\n\n  var repFunc = function (wholeMatch, match, left, right) {\n    // encode html entities\n    var codeblock = left + showdown.subParser('encodeCode')(match) + right;\n    return '\\n\\n~G' + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + 'G\\n\\n';\n  };\n\n  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '^ {0,3}<pre\\\\b[^>]*>\\\\s*<code\\\\b[^>]*>', '^ {0,3}</code>\\\\s*</pre>', 'gim');\n  return text;\n});\n\r\nshowdown.subParser('headers', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('headers.before', text, options, globals);\n\n  var prefixHeader = options.prefixHeaderId,\n      headerLevelStart = (isNaN(parseInt(options.headerLevelStart))) ? 1 : parseInt(options.headerLevelStart),\n      ghHeaderId = options.ghCompatibleHeaderId,\n\n  // Set text-style headers:\n  //\tHeader 1\n  //\t========\n  //\n  //\tHeader 2\n  //\t--------\n  //\n      setextRegexH1 = (options.smoothLivePreview) ? /^(.+)[ \\t]*\\n={2,}[ \\t]*\\n+/gm : /^(.+)[ \\t]*\\n=+[ \\t]*\\n+/gm,\n      setextRegexH2 = (options.smoothLivePreview) ? /^(.+)[ \\t]*\\n-{2,}[ \\t]*\\n+/gm : /^(.+)[ \\t]*\\n-+[ \\t]*\\n+/gm;\n\n  text = text.replace(setextRegexH1, function (wholeMatch, m1) {\n\n    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),\n        hID = (options.noHeaderId) ? '' : ' id=\"' + headerId(m1) + '\"',\n        hLevel = headerLevelStart,\n        hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';\n    return showdown.subParser('hashBlock')(hashBlock, options, globals);\n  });\n\n  text = text.replace(setextRegexH2, function (matchFound, m1) {\n    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),\n        hID = (options.noHeaderId) ? '' : ' id=\"' + headerId(m1) + '\"',\n        hLevel = headerLevelStart + 1,\n      hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';\n    return showdown.subParser('hashBlock')(hashBlock, options, globals);\n  });\n\n  // atx-style headers:\n  //  # Header 1\n  //  ## Header 2\n  //  ## Header 2 with closing hashes ##\n  //  ...\n  //  ###### Header 6\n  //\n  var atxStyle = (options.requireSpaceBeforeHeadingText) ? /^(#{1,6})[ \\t]+(.+?)[ \\t]*#*\\n+/gm : /^(#{1,6})[ \\t]*(.+?)[ \\t]*#*\\n+/gm;\n\n  text = text.replace(atxStyle, function (wholeMatch, m1, m2) {\n    var span = showdown.subParser('spanGamut')(m2, options, globals),\n        hID = (options.noHeaderId) ? '' : ' id=\"' + headerId(m2) + '\"',\n        hLevel = headerLevelStart - 1 + m1.length,\n        header = '<h' + hLevel + hID + '>' + span + '</h' + hLevel + '>';\n\n    return showdown.subParser('hashBlock')(header, options, globals);\n  });\n\n  function headerId(m) {\n    var title, escapedId;\n\n    if (ghHeaderId) {\n      escapedId = m\n        .replace(/ /g, '-')\n        //replace previously escaped chars (&, ~ and $)\n        .replace(/&amp;/g, '')\n        .replace(/~T/g, '')\n        .replace(/~D/g, '')\n        //replace rest of the chars (&~$ are repeated as they might have been escaped)\n        // borrowed from github's redcarpet (some they should produce similar results)\n        .replace(/[&+$,\\/:;=?@\"#{}|^~\\[\\]`\\\\*)(%.!'<>]/g, '')\n        .toLowerCase();\n    } else {\n      escapedId = m.replace(/[^\\w]/g, '').toLowerCase();\n    }\n\n    if (globals.hashLinkCounts[escapedId]) {\n      title = escapedId + '-' + (globals.hashLinkCounts[escapedId]++);\n    } else {\n      title = escapedId;\n      globals.hashLinkCounts[escapedId] = 1;\n    }\n\n    // Prefix id to prevent causing inadvertent pre-existing style matches.\n    if (prefixHeader === true) {\n      prefixHeader = 'section';\n    }\n\n    if (showdown.helper.isString(prefixHeader)) {\n      return prefixHeader + title;\n    }\n    return title;\n  }\n\n  text = globals.converter._dispatch('headers.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Turn Markdown image shortcuts into <img> tags.\n */\nshowdown.subParser('images', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('images.before', text, options, globals);\n\n  var inlineRegExp    = /!\\[(.*?)]\\s?\\([ \\t]*()<?(\\S+?)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*(?:(['\"])(.*?)\\6[ \\t]*)?\\)/g,\n      referenceRegExp = /!\\[([^\\]]*?)] ?(?:\\n *)?\\[(.*?)]()()()()()/g;\n\n  function writeImageTag (wholeMatch, altText, linkId, url, width, height, m5, title) {\n\n    var gUrls   = globals.gUrls,\n        gTitles = globals.gTitles,\n        gDims   = globals.gDimensions;\n\n    linkId = linkId.toLowerCase();\n\n    if (!title) {\n      title = '';\n    }\n\n    if (url === '' || url === null) {\n      if (linkId === '' || linkId === null) {\n        // lower-case and turn embedded newlines into spaces\n        linkId = altText.toLowerCase().replace(/ ?\\n/g, ' ');\n      }\n      url = '#' + linkId;\n\n      if (!showdown.helper.isUndefined(gUrls[linkId])) {\n        url = gUrls[linkId];\n        if (!showdown.helper.isUndefined(gTitles[linkId])) {\n          title = gTitles[linkId];\n        }\n        if (!showdown.helper.isUndefined(gDims[linkId])) {\n          width = gDims[linkId].width;\n          height = gDims[linkId].height;\n        }\n      } else {\n        return wholeMatch;\n      }\n    }\n\n    altText = altText.replace(/\"/g, '&quot;');\n    altText = showdown.helper.escapeCharacters(altText, '*_', false);\n    url = showdown.helper.escapeCharacters(url, '*_', false);\n    var result = '<img src=\"' + url + '\" alt=\"' + altText + '\"';\n\n    if (title) {\n      title = title.replace(/\"/g, '&quot;');\n      title = showdown.helper.escapeCharacters(title, '*_', false);\n      result += ' title=\"' + title + '\"';\n    }\n\n    if (width && height) {\n      width  = (width === '*') ? 'auto' : width;\n      height = (height === '*') ? 'auto' : height;\n\n      result += ' width=\"' + width + '\"';\n      result += ' height=\"' + height + '\"';\n    }\n\n    result += ' />';\n\n    return result;\n  }\n\n  // First, handle reference-style labeled images: ![alt text][id]\n  text = text.replace(referenceRegExp, writeImageTag);\n\n  // Next, handle inline images:  ![alt text](url =<width>x<height> \"optional title\")\n  text = text.replace(inlineRegExp, writeImageTag);\n\n  text = globals.converter._dispatch('images.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('italicsAndBold', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('italicsAndBold.before', text, options, globals);\n\n  if (options.literalMidWordUnderscores) {\n    //underscores\n    // Since we are consuming a \\s character, we need to add it\n    text = text.replace(/(^|\\s|>|\\b)__(?=\\S)([\\s\\S]+?)__(?=\\b|<|\\s|$)/gm, '$1<strong>$2</strong>');\n    text = text.replace(/(^|\\s|>|\\b)_(?=\\S)([\\s\\S]+?)_(?=\\b|<|\\s|$)/gm, '$1<em>$2</em>');\n    //asterisks\n    text = text.replace(/(\\*\\*)(?=\\S)([^\\r]*?\\S[*]*)\\1/g, '<strong>$2</strong>');\n    text = text.replace(/(\\*)(?=\\S)([^\\r]*?\\S)\\1/g, '<em>$2</em>');\n\n  } else {\n    // <strong> must go first:\n    text = text.replace(/(\\*\\*|__)(?=\\S)([^\\r]*?\\S[*_]*)\\1/g, '<strong>$2</strong>');\n    text = text.replace(/(\\*|_)(?=\\S)([^\\r]*?\\S)\\1/g, '<em>$2</em>');\n  }\n\n  text = globals.converter._dispatch('italicsAndBold.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Form HTML ordered (numbered) and unordered (bulleted) lists.\n */\nshowdown.subParser('lists', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('lists.before', text, options, globals);\n\n  /**\n   * Process the contents of a single ordered or unordered list, splitting it\n   * into individual list items.\n   * @param {string} listStr\n   * @param {boolean} trimTrailing\n   * @returns {string}\n   */\n  function processListItems (listStr, trimTrailing) {\n    // The $g_list_level global keeps track of when we're inside a list.\n    // Each time we enter a list, we increment it; when we leave a list,\n    // we decrement. If it's zero, we're not in a list anymore.\n    //\n    // We do this because when we're not inside a list, we want to treat\n    // something like this:\n    //\n    //    I recommend upgrading to version\n    //    8. Oops, now this line is treated\n    //    as a sub-list.\n    //\n    // As a single paragraph, despite the fact that the second line starts\n    // with a digit-period-space sequence.\n    //\n    // Whereas when we're inside a list (or sub-list), that line will be\n    // treated as the start of a sub-list. What a kludge, huh? This is\n    // an aspect of Markdown's syntax that's hard to parse perfectly\n    // without resorting to mind-reading. Perhaps the solution is to\n    // change the syntax rules such that sub-lists must start with a\n    // starting cardinal number; e.g. \"1.\" or \"a.\".\n    globals.gListLevel++;\n\n    // trim trailing blank lines:\n    listStr = listStr.replace(/\\n{2,}$/, '\\n');\n\n    // attacklab: add sentinel to emulate \\z\n    listStr += '~0';\n\n    var rgx = /(\\n)?(^ {0,3})([*+-]|\\d+[.])[ \\t]+((\\[(x|X| )?])?[ \\t]*[^\\r]+?(\\n{1,2}))(?=\\n*(~0| {0,3}([*+-]|\\d+[.])[ \\t]+))/gm,\n        isParagraphed = (/\\n[ \\t]*\\n(?!~0)/.test(listStr));\n\n    // Since version 1.5, nesting sublists requires 4 spaces (or 1 tab) indentation,\n    // which is a syntax breaking change\n    // activating this option reverts to old behavior\n    if (options.disableForced4SpacesIndentedSublists) {\n      rgx = /(\\n)?(^ {0,3})([*+-]|\\d+[.])[ \\t]+((\\[(x|X| )?])?[ \\t]*[^\\r]+?(\\n{1,2}))(?=\\n*(~0|\\2([*+-]|\\d+[.])[ \\t]+))/gm;\n    }\n\n    listStr = listStr.replace(rgx, function (wholeMatch, m1, m2, m3, m4, taskbtn, checked) {\n      checked = (checked && checked.trim() !== '');\n\n      var item = showdown.subParser('outdent')(m4, options, globals),\n          bulletStyle = '';\n\n      // Support for github tasklists\n      if (taskbtn && options.tasklists) {\n        bulletStyle = ' class=\"task-list-item\" style=\"list-style-type: none;\"';\n        item = item.replace(/^[ \\t]*\\[(x|X| )?]/m, function () {\n          var otp = '<input type=\"checkbox\" disabled style=\"margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;\"';\n          if (checked) {\n            otp += ' checked';\n          }\n          otp += '>';\n          return otp;\n        });\n      }\n\n      // ISSUE #312\n      // This input: - - - a\n      // causes trouble to the parser, since it interprets it as:\n      // <ul><li><li><li>a</li></li></li></ul>\n      // instead of:\n      // <ul><li>- - a</li></ul>\n      // So, to prevent it, we will put a marker (~A)in the beginning of the line\n      // Kind of hackish/monkey patching, but seems more effective than overcomplicating the list parser\n      item = item.replace(/^([-*+]|\\d\\.)[ \\t]+[\\S\\n ]*/g, function (wm2) {\n        return '~A' + wm2;\n      });\n\n      // m1 - Leading line or\n      // Has a double return (multi paragraph) or\n      // Has sublist\n      if (m1 || (item.search(/\\n{2,}/) > -1)) {\n        item = showdown.subParser('githubCodeBlocks')(item, options, globals);\n        item = showdown.subParser('blockGamut')(item, options, globals);\n      } else {\n        // Recursion for sub-lists:\n        item = showdown.subParser('lists')(item, options, globals);\n        item = item.replace(/\\n$/, ''); // chomp(item)\n        item = showdown.subParser('hashHTMLBlocks')(item, options, globals);\n        // Colapse double linebreaks\n        item = item.replace(/\\n\\n+/g, '\\n\\n');\n        // replace double linebreaks with a placeholder\n        item = item.replace(/\\n\\n/g, '~B');\n        if (isParagraphed) {\n          item = showdown.subParser('paragraphs')(item, options, globals);\n        } else {\n          item = showdown.subParser('spanGamut')(item, options, globals);\n        }\n        item = item.replace(/~B/g, '\\n\\n');\n      }\n\n      // now we need to remove the marker (~A)\n      item = item.replace('~A', '');\n      // we can finally wrap the line in list item tags\n      item =  '<li' + bulletStyle + '>' + item + '</li>\\n';\n\n      return item;\n    });\n\n    // attacklab: strip sentinel\n    listStr = listStr.replace(/~0/g, '');\n\n    globals.gListLevel--;\n\n    if (trimTrailing) {\n      listStr = listStr.replace(/\\s+$/, '');\n    }\n\n    return listStr;\n  }\n\n  /**\n   * Check and parse consecutive lists (better fix for issue #142)\n   * @param {string} list\n   * @param {string} listType\n   * @param {boolean} trimTrailing\n   * @returns {string}\n   */\n  function parseConsecutiveLists(list, listType, trimTrailing) {\n    // check if we caught 2 or more consecutive lists by mistake\n    // we use the counterRgx, meaning if listType is UL we look for OL and vice versa\n    var olRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?\\d+\\.[ \\t]/gm : /^ {0,3}\\d+\\.[ \\t]/gm,\n        ulRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?[*+-][ \\t]/gm : /^ {0,3}[*+-][ \\t]/gm,\n        counterRxg = (listType === 'ul') ? olRgx : ulRgx,\n        result = '';\n\n    if (list.search(counterRxg) !== -1) {\n      (function parseCL(txt) {\n        var pos = txt.search(counterRxg);\n        if (pos !== -1) {\n          // slice\n          result += '\\n<' + listType + '>\\n' + processListItems(txt.slice(0, pos), !!trimTrailing) + '</' + listType + '>\\n';\n\n          // invert counterType and listType\n          listType = (listType === 'ul') ? 'ol' : 'ul';\n          counterRxg = (listType === 'ul') ? olRgx : ulRgx;\n\n          //recurse\n          parseCL(txt.slice(pos));\n        } else {\n          result += '\\n<' + listType + '>\\n' + processListItems(txt, !!trimTrailing) + '</' + listType + '>\\n';\n        }\n      })(list);\n    } else {\n      result = '\\n<' + listType + '>\\n' + processListItems(list, !!trimTrailing) + '</' + listType + '>\\n';\n    }\n\n    return result;\n  }\n\n  // add sentinel to hack around khtml/safari bug:\n  // http://bugs.webkit.org/show_bug.cgi?id=11231\n  text += '~0';\n\n  if (globals.gListLevel) {\n    text = text.replace(/^(( {0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(~0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/gm,\n      function (wholeMatch, list, m2) {\n        var listType = (m2.search(/[*+-]/g) > -1) ? 'ul' : 'ol';\n        return parseConsecutiveLists(list, listType, true);\n      }\n    );\n  } else {\n    text = text.replace(/(\\n\\n|^\\n?)(( {0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(~0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/gm,\n      function (wholeMatch, m1, list, m3) {\n        var listType = (m3.search(/[*+-]/g) > -1) ? 'ul' : 'ol';\n        return parseConsecutiveLists(list, listType, false);\n      }\n    );\n  }\n\n  // strip sentinel\n  text = text.replace(/~0/, '');\n  text = globals.converter._dispatch('lists.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Remove one level of line-leading tabs or spaces\n */\nshowdown.subParser('outdent', function (text) {\n  'use strict';\n\n  // attacklab: hack around Konqueror 3.5.4 bug:\n  // \"----------bug\".replace(/^-/g,\"\") == \"bug\"\n  text = text.replace(/^(\\t|[ ]{1,4})/gm, '~0'); // attacklab: g_tab_width\n\n  // attacklab: clean up hack\n  text = text.replace(/~0/g, '');\n\n  return text;\n});\n\r\n/**\n *\n */\nshowdown.subParser('paragraphs', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('paragraphs.before', text, options, globals);\n  // Strip leading and trailing lines:\n  text = text.replace(/^\\n+/g, '');\n  text = text.replace(/\\n+$/g, '');\n\n  var grafs = text.split(/\\n{2,}/g),\n      grafsOut = [],\n      end = grafs.length; // Wrap <p> tags\n\n  for (var i = 0; i < end; i++) {\n    var str = grafs[i];\n    // if this is an HTML marker, copy it\n    if (str.search(/~(K|G)(\\d+)\\1/g) >= 0) {\n      grafsOut.push(str);\n    } else {\n      str = showdown.subParser('spanGamut')(str, options, globals);\n      str = str.replace(/^([ \\t]*)/g, '<p>');\n      str += '</p>';\n      grafsOut.push(str);\n    }\n  }\n\n  /** Unhashify HTML blocks */\n  end = grafsOut.length;\n  for (i = 0; i < end; i++) {\n    var blockText = '',\n        grafsOutIt = grafsOut[i],\n        codeFlag = false;\n    // if this is a marker for an html block...\n    while (grafsOutIt.search(/~(K|G)(\\d+)\\1/) >= 0) {\n      var delim = RegExp.$1,\n          num   = RegExp.$2;\n\n      if (delim === 'K') {\n        blockText = globals.gHtmlBlocks[num];\n      } else {\n        // we need to check if ghBlock is a false positive\n        if (codeFlag) {\n          // use encoded version of all text\n          blockText = showdown.subParser('encodeCode')(globals.ghCodeBlocks[num].text);\n        } else {\n          blockText = globals.ghCodeBlocks[num].codeblock;\n        }\n      }\n      blockText = blockText.replace(/\\$/g, '$$$$'); // Escape any dollar signs\n\n      grafsOutIt = grafsOutIt.replace(/(\\n\\n)?~(K|G)\\d+\\2(\\n\\n)?/, blockText);\n      // Check if grafsOutIt is a pre->code\n      if (/^<pre\\b[^>]*>\\s*<code\\b[^>]*>/.test(grafsOutIt)) {\n        codeFlag = true;\n      }\n    }\n    grafsOut[i] = grafsOutIt;\n  }\n  text = grafsOut.join('\\n');\n  // Strip leading and trailing lines:\n  text = text.replace(/^\\n+/g, '');\n  text = text.replace(/\\n+$/g, '');\n  return globals.converter._dispatch('paragraphs.after', text, options, globals);\n});\n\r\n/**\n * Run extension\n */\nshowdown.subParser('runExtension', function (ext, text, options, globals) {\n  'use strict';\n\n  if (ext.filter) {\n    text = ext.filter(text, globals.converter, options);\n\n  } else if (ext.regex) {\n    // TODO remove this when old extension loading mechanism is deprecated\n    var re = ext.regex;\n    if (!re instanceof RegExp) {\n      re = new RegExp(re, 'g');\n    }\n    text = text.replace(re, ext.replace);\n  }\n\n  return text;\n});\n\r\n/**\n * These are all the transformations that occur *within* block-level\n * tags like paragraphs, headers, and list items.\n */\nshowdown.subParser('spanGamut', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('spanGamut.before', text, options, globals);\n  text = showdown.subParser('codeSpans')(text, options, globals);\n  text = showdown.subParser('escapeSpecialCharsWithinTagAttributes')(text, options, globals);\n  text = showdown.subParser('encodeBackslashEscapes')(text, options, globals);\n\n  // Process anchor and image tags. Images must come first,\n  // because ![foo][f] looks like an anchor.\n  text = showdown.subParser('images')(text, options, globals);\n  text = showdown.subParser('anchors')(text, options, globals);\n\n  // Make links out of things like `<http://example.com/>`\n  // Must come after _DoAnchors(), because you can use < and >\n  // delimiters in inline links like [this](<url>).\n  text = showdown.subParser('autoLinks')(text, options, globals);\n  text = showdown.subParser('encodeAmpsAndAngles')(text, options, globals);\n  text = showdown.subParser('italicsAndBold')(text, options, globals);\n  text = showdown.subParser('strikethrough')(text, options, globals);\n\n  // Do hard breaks\n  if (options.simpleLineBreaks) {\n    // GFM style hard breaks\n    text = text.replace(/\\n/g, '<br />\\n');\n  } else {\n    // Vanilla hard breaks\n    text = text.replace(/  +\\n/g, '<br />\\n');\n  }\n\n  text = globals.converter._dispatch('spanGamut.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('strikethrough', function (text, options, globals) {\n  'use strict';\n\n  if (options.strikethrough) {\n    text = globals.converter._dispatch('strikethrough.before', text, options, globals);\n    text = text.replace(/(?:~T){2}([\\s\\S]+?)(?:~T){2}/g, '<del>$1</del>');\n    text = globals.converter._dispatch('strikethrough.after', text, options, globals);\n  }\n\n  return text;\n});\n\r\n/**\n * Strip any lines consisting only of spaces and tabs.\n * This makes subsequent regexs easier to write, because we can\n * match consecutive blank lines with /\\n+/ instead of something\n * contorted like /[ \\t]*\\n+/\n */\nshowdown.subParser('stripBlankLines', function (text) {\n  'use strict';\n  return text.replace(/^[ \\t]+$/mg, '');\n});\n\r\n/**\n * Strips link definitions from text, stores the URLs and titles in\n * hash references.\n * Link defs are in the form: ^[id]: url \"optional title\"\n */\nshowdown.subParser('stripLinkDefinitions', function (text, options, globals) {\n  'use strict';\n\n  var regex = /^ {0,3}\\[(.+)]:[ \\t]*\\n?[ \\t]*<?(\\S+?)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*\\n?[ \\t]*(?:(\\n*)[\"|'(](.+?)[\"|')][ \\t]*)?(?:\\n+|(?=~0))/gm;\n\n  // attacklab: sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug\n  text += '~0';\n\n  text = text.replace(regex, function (wholeMatch, linkId, url, width, height, blankLines, title) {\n    linkId = linkId.toLowerCase();\n    globals.gUrls[linkId] = showdown.subParser('encodeAmpsAndAngles')(url);  // Link IDs are case-insensitive\n\n    if (blankLines) {\n      // Oops, found blank lines, so it's not a title.\n      // Put back the parenthetical statement we stole.\n      return blankLines + title;\n\n    } else {\n      if (title) {\n        globals.gTitles[linkId] = title.replace(/\"|'/g, '&quot;');\n      }\n      if (options.parseImgDimensions && width && height) {\n        globals.gDimensions[linkId] = {\n          width:  width,\n          height: height\n        };\n      }\n    }\n    // Completely remove the definition from the text\n    return '';\n  });\n\n  // attacklab: strip sentinel\n  text = text.replace(/~0/, '');\n\n  return text;\n});\n\r\nshowdown.subParser('tables', function (text, options, globals) {\n  'use strict';\n\n  if (!options.tables) {\n    return text;\n  }\n\n  var tableRgx = /^ {0,3}\\|?.+\\|.+\\n[ \\t]{0,3}\\|?[ \\t]*:?[ \\t]*(?:-|=){2,}[ \\t]*:?[ \\t]*\\|[ \\t]*:?[ \\t]*(?:-|=){2,}[\\s\\S]+?(?:\\n\\n|~0)/gm;\n\n  function parseStyles(sLine) {\n    if (/^:[ \\t]*--*$/.test(sLine)) {\n      return ' style=\"text-align:left;\"';\n    } else if (/^--*[ \\t]*:[ \\t]*$/.test(sLine)) {\n      return ' style=\"text-align:right;\"';\n    } else if (/^:[ \\t]*--*[ \\t]*:$/.test(sLine)) {\n      return ' style=\"text-align:center;\"';\n    } else {\n      return '';\n    }\n  }\n\n  function parseHeaders(header, style) {\n    var id = '';\n    header = header.trim();\n    if (options.tableHeaderId) {\n      id = ' id=\"' + header.replace(/ /g, '_').toLowerCase() + '\"';\n    }\n    header = showdown.subParser('spanGamut')(header, options, globals);\n\n    return '<th' + id + style + '>' + header + '</th>\\n';\n  }\n\n  function parseCells(cell, style) {\n    var subText = showdown.subParser('spanGamut')(cell, options, globals);\n    return '<td' + style + '>' + subText + '</td>\\n';\n  }\n\n  function buildTable(headers, cells) {\n    var tb = '<table>\\n<thead>\\n<tr>\\n',\n        tblLgn = headers.length;\n\n    for (var i = 0; i < tblLgn; ++i) {\n      tb += headers[i];\n    }\n    tb += '</tr>\\n</thead>\\n<tbody>\\n';\n\n    for (i = 0; i < cells.length; ++i) {\n      tb += '<tr>\\n';\n      for (var ii = 0; ii < tblLgn; ++ii) {\n        tb += cells[i][ii];\n      }\n      tb += '</tr>\\n';\n    }\n    tb += '</tbody>\\n</table>\\n';\n    return tb;\n  }\n\n  text = globals.converter._dispatch('tables.before', text, options, globals);\n\n  text = text.replace(tableRgx, function (rawTable) {\n\n    var i, tableLines = rawTable.split('\\n');\n\n    // strip wrong first and last column if wrapped tables are used\n    for (i = 0; i < tableLines.length; ++i) {\n      if (/^ {0,3}\\|/.test(tableLines[i])) {\n        tableLines[i] = tableLines[i].replace(/^ {0,3}\\|/, '');\n      }\n      if (/\\|[ \\t]*$/.test(tableLines[i])) {\n        tableLines[i] = tableLines[i].replace(/\\|[ \\t]*$/, '');\n      }\n    }\n\n    var rawHeaders = tableLines[0].split('|').map(function (s) { return s.trim();}),\n        rawStyles = tableLines[1].split('|').map(function (s) { return s.trim();}),\n        rawCells = [],\n        headers = [],\n        styles = [],\n        cells = [];\n\n    tableLines.shift();\n    tableLines.shift();\n\n    for (i = 0; i < tableLines.length; ++i) {\n      if (tableLines[i].trim() === '') {\n        continue;\n      }\n      rawCells.push(\n        tableLines[i]\n          .split('|')\n          .map(function (s) {\n            return s.trim();\n          })\n      );\n    }\n\n    if (rawHeaders.length < rawStyles.length) {\n      return rawTable;\n    }\n\n    for (i = 0; i < rawStyles.length; ++i) {\n      styles.push(parseStyles(rawStyles[i]));\n    }\n\n    for (i = 0; i < rawHeaders.length; ++i) {\n      if (showdown.helper.isUndefined(styles[i])) {\n        styles[i] = '';\n      }\n      headers.push(parseHeaders(rawHeaders[i], styles[i]));\n    }\n\n    for (i = 0; i < rawCells.length; ++i) {\n      var row = [];\n      for (var ii = 0; ii < headers.length; ++ii) {\n        if (showdown.helper.isUndefined(rawCells[i][ii])) {\n\n        }\n        row.push(parseCells(rawCells[i][ii], styles[ii]));\n      }\n      cells.push(row);\n    }\n\n    return buildTable(headers, cells);\n  });\n\n  text = globals.converter._dispatch('tables.after', text, options, globals);\n\n  return text;\n});\n\r\n/**\n * Swap back in all the special characters we've hidden.\n */\nshowdown.subParser('unescapeSpecialChars', function (text) {\n  'use strict';\n\n  text = text.replace(/~E(\\d+)E/g, function (wholeMatch, m1) {\n    var charCodeToReplace = parseInt(m1);\n    return String.fromCharCode(charCodeToReplace);\n  });\n  return text;\n});\n\r\nvar root = this;\n\n// CommonJS/nodeJS Loader\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = showdown;\n\n// AMD Loader\n} else if (typeof define === 'function' && define.amd) {\n  define(function () {\n    'use strict';\n    return showdown;\n  });\n\n// Regular Browser loader\n} else {\n  root.showdown = showdown;\n}\n}).call(this);\r\n\n//# sourceMappingURL=showdown.js.map\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/showdown/dist/showdown.js\n// module id = 70\n// module chunks = 0","export default class Utils {\r\n\r\n    static isEmpty(val: any): boolean {\r\n        return val === void 0 || val === null || `${val}`.trim() === '';\r\n    }\r\n\r\n    static isObject(obj: any): boolean {\r\n        return typeof obj === 'object';\r\n    }\r\n\r\n    static isFunction(fn: any): boolean {\r\n        return typeof fn === 'function';\r\n    }\r\n\r\n    static forIn(object: { [key: string]: any } = {}, cb: (val: any, key: string, object: { [key: string]: any }) => void = (() => {\r\n    })): void {\r\n        Object.keys(object).forEach((key: string) => {\r\n            cb(object[key], key, object);\r\n        });\r\n    }\r\n\r\n    static trimEachLine(text: string, trimEachLine?: boolean | 'tab' | 'space') {\r\n        if (this.isEmpty(text)) return text;\r\n\r\n        switch (trimEachLine) {\r\n            case 'space':\r\n                return text.replace(/^(?=\\n)$|^[ ]+|[ ]+$/gm, '');\r\n            case 'tab':\r\n                return text.replace(/^(?=\\n)$|^\\t+|\\t+$/gm, '');\r\n            case true:\r\n                return text.replace(/^(?=\\n)$|^\\s+|\\s+$/gm, '');\r\n            default:\r\n                return text;\r\n        }\r\n\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./src/utils.ts","import { Injectable } from '@angular/core';\r\nimport $ from './utils';\r\nimport { IConverterConstructorOptions } from './base-converter.class';\r\n\r\nexport class ConverterOptions {\r\n\r\n    omitExtraWLInCodeBlocks: boolean;\r\n    noHeaderId: boolean;\r\n    prefixHeaderId: string | boolean;\r\n    parseImgDimensions: boolean;\r\n    headerLevelStart: number;\r\n    literalMidWordUnderscores: boolean;\r\n    strikethrough: boolean;\r\n    tables: boolean;\r\n    tablesHeaderId: boolean;\r\n    ghCodeBlocks: boolean;\r\n    tasklists: boolean;\r\n    smoothLivePreview: boolean;\r\n    trimEachLine: boolean | 'space' | 'tab';\r\n    extensions: string | string[];\r\n\r\n    constructor(options?: IConverterConstructorOptions) {\r\n        this.merge(options);\r\n    }\r\n\r\n    public merge(options: IConverterConstructorOptions) {\r\n        if (!$.isObject(options)) return;\r\n        $.forIn(options, (val, key) => {\r\n            this[key] = val;\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * @example\r\n * ```javascript\r\n * import { NgModel } from '@angular/core';\r\n * import { ConverterOptions, BaseConverterOptions } from 'ng2-md';\r\n * export class MyConverterOptions extends ConverterOptions{\r\n *  constructor(){\r\n *      super({...});\r\n *  }\r\n * }\r\n * @NgModel({\r\n *  providers:[\r\n *      {provide: ConverterOptions, useClass: MyConverterOptions},\r\n *  ]\r\n * })\r\n * export class AppModule{}\r\n * ```\r\n */\r\n@Injectable()\r\nexport class BaseConverterOptions extends ConverterOptions {\r\n    constructor() {\r\n        super({\r\n            omitExtraWLInCodeBlocks: false,\r\n            noHeaderId: false,\r\n            prefixHeaderId: false,\r\n            parseImgDimensions: false,\r\n            headerLevelStart: 1,\r\n            literalMidWordUnderscores: false,\r\n            strikethrough: false,\r\n            tables: false,\r\n            tablesHeaderId: false,\r\n            ghCodeBlocks: true,\r\n            tasklists: false,\r\n            smoothLivePreview: false,\r\n            trimEachLine: false\r\n        });\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./src/base-converter-options.provider.ts","import { Injectable, Optional } from '@angular/core';\r\nimport { ConverterOptions } from './base-converter-options.provider';\r\nimport { BaseConverter } from './base-converter.class';\r\n\r\n/**\r\n * @example\r\n * ```javascript\r\n * import { MdConverter } from 'ng2-md';\r\n * class Some{\r\n *  constructor(mdConverter: MdConverter){\r\n *      console.log(mdConverter.makeHtml(\"...\"));\r\n *  }\r\n * }\r\n * ```\r\n */\r\n@Injectable()\r\nexport class MdConverter extends BaseConverter {\r\n    constructor(@Optional() options?: ConverterOptions) {\r\n        super(options);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./src/md-converter.provider.ts","import { Directive, ElementRef, Input, OnInit, Optional } from '@angular/core';\r\nimport $ from './utils';\r\nimport { ConverterOptions } from './base-converter-options.provider';\r\nimport { BaseConverter, IConverterOptions } from './base-converter.class';\r\n\r\nlet optionsProperties: string[] = [\r\n    'omitExtraWLInCodeBlocks', 'noHeaderId', 'prefixHeaderId', 'parseImgDimensions', 'headerLevelStart', 'literalMidWordUnderscores', 'strikethrough', 'tables', 'tablesHeaderId', 'ghCodeBlocks', 'tasklists', 'smoothLivePreview', 'trimEachLine'\r\n];\r\n\r\nexport enum MD_COMPONENT_TYPES {\r\n    NONE,\r\n    SRC,\r\n    BINDING,\r\n    CONTENT\r\n}\r\n\r\nexport enum MD_COMPONENT_STATUSES {\r\n    CREATED,\r\n    INIT,\r\n    PROCESSING,\r\n    READY,\r\n}\r\n\r\n/**\r\n * @problem in content use <md>{}</md> - [unescaped \"{\":](https://github.com/angular/angular/issues/11859) the solution is to sanitize (html char code etc.).\r\n * \r\n * @example\r\n * ```javascript\r\n * import { NgModule } from '@angular/core';\r\n * import { MdDirective } from 'ng2-md';\r\n * @NgModule({\r\n *  declarations: [ MdDirective ];\r\n * })\r\n * export class AppModule{}\r\n * ```\r\n * ```javascript\r\n * import { IConverterOptions } from 'ng2-md';\r\n * // ...\r\n * text: string = \"...\";\r\n * options: IConverterOptions = {...};\r\n * // ...\r\n * ```\r\n * ```html\r\n * <md [value]=\"text\"><md/>\r\n * ```\r\n * ```html\r\n * <div md=\"text\"><div/>\r\n * ```\r\n * ```html\r\n * <md [value]=\"text\" [options]=\"options\"><md/>\r\n * ```\r\n * ```html\r\n * <md [value]=\"text\" [omitExtraWLInCodeBlocks]=\"options.omitExtraWLInCodeBlocks\" [noHeaderId]=\"options.noHeaderId\" [prefixHeaderId]=\"options.prefixHeaderId\" [parseImgDimensions]=\"options.parseImgDimensions\" [headerLevelStart]=\"options.headerLevelStart\" [literalMidWordUnderscores]=\"options.literalMidWordUnderscores\" [strikethrough]=\"options.strikethrough\" [tables]=\"options.tables\" [tablesHeaderId]=\"options.tablesHeaderId\" [ghCodeBlocks]=\"options.ghCodeBlocks\" [tasklists]=\"options.tasklists\" [smoothLivePreview]=\"options.smoothLivePreview\"></md>\r\n * ```\r\n * ```html\r\n * <md trimEachLine=\"space\"> # abc </md> // <md><h1>abc</h1></md>\r\n * ```\r\n * ```html\r\n * <md trimEachLine=\"tab\">\\t# abc\\t</md> // <md><h1>abc</h1></md>\r\n * ```\r\n * both tab and space\r\n * ```html\r\n * <md trimEachLine>\\t # abc\\t </md> // <md><h1>abc</h1></md>\r\n * ```\r\n */\r\n@Directive({\r\n    selector: 'md,[md]',\r\n    inputs: [].concat(optionsProperties)\r\n})\r\nexport class MdDirective extends BaseConverter implements OnInit {\r\n\r\n    public static readonly TYPES = MD_COMPONENT_TYPES;\r\n    public static readonly STATUSES = MD_COMPONENT_STATUSES;\r\n\r\n    // options getter setter dynamic definition (the code after the class)\r\n    public omitExtraWLInCodeBlocks: boolean;\r\n    public noHeaderId: boolean;\r\n    public prefixHeaderId: string | boolean;\r\n    public parseImgDimensions: boolean;\r\n    public headerLevelStart: number;\r\n    public literalMidWordUnderscores: boolean;\r\n    public strikethrough: boolean;\r\n    public tables: boolean;\r\n    public tablesHeaderId: boolean;\r\n    public ghCodeBlocks: boolean;\r\n    public tasklists: boolean;\r\n    public smoothLivePreview: boolean;\r\n    public trimEachLine: boolean | 'tab' | 'space';\r\n\r\n    private _value: string;\r\n    private _type: number = MdDirective.TYPES.NONE;\r\n    private _status: number = MdDirective.STATUSES.CREATED;\r\n\r\n    /** Value of the component (the input md text pre converter). */\r\n    @Input()\r\n    public get value(): string {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value: string) {\r\n        this.setValue(value);\r\n    }\r\n\r\n    /** Type of the input source [binding, content, src]. */\r\n    public get type(): string {\r\n        return MdDirective.TYPES[this._type].toLowerCase();\r\n    }\r\n\r\n    /** Status of the component life cycle. */\r\n    public get status(): string {\r\n        return MdDirective.STATUSES[this._status].toLowerCase();\r\n    }\r\n\r\n    /** Alias to value */\r\n    @Input()\r\n    public get md(): string {\r\n        return this.value;\r\n    }\r\n\r\n    public set md(value: string) {\r\n        this.value = value;\r\n    }\r\n\r\n    @Input()\r\n    public get options(): IConverterOptions {\r\n        return this.getOptions();\r\n    }\r\n\r\n    public set options(options: IConverterOptions) {\r\n        this.setOptions(options);\r\n    }\r\n\r\n    constructor(private _elementRef: ElementRef, @Optional() options?: ConverterOptions) {\r\n        super(options);\r\n\r\n        // override the setOption method (define in the super constructor)\r\n        this.setOption = (optionKey: string, value: any) => {\r\n            this.getOptions()[optionKey] = value;\r\n            this._onChange();\r\n        };\r\n    }\r\n\r\n    public ngOnInit(): void {\r\n\r\n        if (this._type === MdDirective.TYPES.NONE && !$.isEmpty(this._elementRef.nativeElement.innerText)) {\r\n            let value = this._elementRef.nativeElement.innerHTML;\r\n            this.setValue(value, MdDirective.TYPES.CONTENT);\r\n        }\r\n\r\n        if (this._status === MdDirective.STATUSES.CREATED) {\r\n            this._status = MdDirective.STATUSES.INIT;\r\n        }\r\n\r\n    }\r\n\r\n    public setValue(value: string, type: number = MdDirective.TYPES.BINDING): void {\r\n        this._value = value;\r\n        this._type = type;\r\n        this._onChange();\r\n    }\r\n\r\n    public setOptions(options: IConverterOptions): void {\r\n        super.setOptions(options);\r\n        this._onChange();\r\n    }\r\n\r\n    public compile(): void {\r\n        if (this._type === MdDirective.TYPES.NONE) return;\r\n        this._status = MdDirective.STATUSES.PROCESSING;\r\n        this._elementRef.nativeElement.innerHTML = this.toHTML();\r\n        this._status = MdDirective.STATUSES.READY;\r\n    }\r\n\r\n    public registerOnChange(fn: (() => void)): void {\r\n        if (!$.isFunction(fn)) throw new Error('Arg fn is missing or invalid.');\r\n        this._onChange = fn;\r\n    }\r\n\r\n    /** Converter the component (md value) to html */\r\n    public toHTML(): string {\r\n        let {_value: value} = this;\r\n        return this.makeHtml(value);\r\n    }\r\n\r\n    /** Default OnChange method, Called on change value or options */\r\n    private _onChange: (() => void) = (): void => {\r\n        this.compile();\r\n    }\r\n\r\n}\r\n\r\n// define options properties getter setter for angular directive and direct access \r\noptionsProperties.forEach((key: string) => {\r\n    Object.defineProperty(MdDirective.prototype, key, {\r\n        set(value: any): void {\r\n            this.setOption(key, $.isEmpty(value) ? true : value);\r\n        },\r\n        get(): any {\r\n            return this.getOption(key);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n});\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./src/md.directive.ts","import { Directive, Input } from '@angular/core';\r\nimport { Http, Response } from '@angular/http';\r\nimport { MdDirective } from './md.directive';\r\n\r\n/**\r\n * @example\r\n * ```javascript\r\n * import { NgModule } from '@angular/core';\r\n * import { MdDirective, SrcDirective } from 'ng2-md';\r\n * @NgModule({\r\n *  declarations: [ MdDirective, SrcDirective ];\r\n * })\r\n * export class AppModule{}\r\n * ```\r\n * ```html\r\n * <md src=\"README.md\"><md/>\r\n * ```\r\n * ```html\r\n * <md src=\"README.md\" [options]=\"{...} as IConverterOptions\"><md/>\r\n * ```\r\n * ```html\r\n * <div md src=\"README.md\"><div/>\r\n * ```\r\n */\r\n@Directive({\r\n    selector: 'md[src],[md][src]'\r\n})\r\nexport class SrcDirective {\r\n\r\n    private _src: string;\r\n\r\n    /** Source of md file */\r\n    @Input()\r\n    public get src(): string {\r\n        return this._src;\r\n    }\r\n\r\n    public set src(src: string) {\r\n        this._src = src;\r\n        this.load();\r\n    }\r\n\r\n    constructor(private _mdDirective: MdDirective, private _http: Http) {\r\n    }\r\n\r\n    public load(): void {\r\n        let {src} = this;\r\n        this._http.get(src).subscribe((res: Response) => {\r\n            let value = res.text();\r\n            this._mdDirective.setValue(value, MdDirective.TYPES.SRC);\r\n        });\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./src/src.directive.ts","import { PipeTransform, Pipe, Optional } from '@angular/core';\r\nimport { ConverterOptions } from './base-converter-options.provider';\r\nimport { BaseConverter, IConverterOptions } from './base-converter.class';\r\n\r\n/**\r\n * @example\r\n * ```javascript\r\n * import { NgModule } from '@angular/core';\r\n * import { MdPipe } from 'ng2-md';\r\n * @NgModule({\r\n *  declarations: [ MdPipe ];\r\n * })\r\n * export class AppModule{}\r\n * ```\r\n * ```javascript\r\n * import { IConverterOptions } from 'ng2-md';\r\n * // ...\r\n * md: string = \"...\";\r\n * options: IConverterOptions = {...};\r\n * // ...\r\n * ```\r\n * ```html\r\n * {{ md | md }}\r\n * ```\r\n * ```html\r\n * {{ md | md:options}}\r\n * ```\r\n */\r\n@Pipe({\r\n    name: 'md',\r\n    pure: false\r\n})\r\nexport class MdPipe extends BaseConverter implements PipeTransform {\r\n\r\n    constructor(@Optional() options: ConverterOptions) {\r\n        super(options);\r\n    }\r\n\r\n    transform(md: string = '', options?: IConverterOptions): string {\r\n        this.setOptions(options);\r\n        return this.makeHtml(md);\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./src/md.pipe.ts","import { NgModule } from '@angular/core';\r\nimport { MdDirective } from './md.directive';\r\nimport { SrcDirective } from './src.directive';\r\nimport { MdPipe } from './md.pipe';\r\nimport { MdConverter } from './md-converter.provider';\r\nimport { ConverterOptions, BaseConverterOptions } from './base-converter-options.provider';\r\n\r\n\r\nlet declarations = [\r\n    MdDirective,\r\n    MdPipe,\r\n    SrcDirective\r\n];\r\n\r\n/**\r\n * @example\r\n * ```javascript\r\n * import { NgModule } from '@angular/core';\r\n * import { MdModule} from 'ng2-md';\r\n * @NgModule({\r\n *  imports: [ MdModule ];\r\n * })\r\n * export class AppModule{}\r\n */\r\n@NgModule({\r\n    declarations,\r\n    providers: [\r\n        MdConverter,\r\n        {provide: ConverterOptions, useClass: BaseConverterOptions}\r\n    ],\r\n    exports: declarations\r\n})\r\nexport class MdModule {\r\n}\n\n\n// WEBPACK FOOTER //\n// ./~/angular2-template-loader!./src/md.module.ts","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./demo/src/styles.css\n// module id = 78\n// module chunks = 0"],"sourceRoot":""}